/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  fragment UserCore on User {\n    id\n    name\n    email\n    role\n    status\n    createdAt\n    updatedAt\n  }\n": typeof types.UserCoreFragmentDoc,
    "\n  fragment ClassCore on Class {\n    id\n    classroomId\n    slug\n    name\n    subject\n    period\n    gradeLevel\n    joinCode\n    schoolName\n    district\n    payPeriodDefault\n    startingBalance\n    teacherIds\n    defaultCurrency\n    isArchived\n    createdAt\n    updatedAt\n  }\n": typeof types.ClassCoreFragmentDoc,
    "\n  fragment StudentDtoCore on Student {\n    id\n    name\n    balance\n    classId\n  }\n": typeof types.StudentDtoCoreFragmentDoc,
    "\n  fragment StoreItemCore on StoreItem {\n    id\n    classId\n    title\n    price\n    description\n    imageUrl\n    stock\n    perStudentLimit\n    active\n    sort\n    createdAt\n    updatedAt\n  }\n": typeof types.StoreItemCoreFragmentDoc,
    "\n  fragment JobCore on Job {\n    id\n    classId\n    title\n    description\n    period\n    salary { amount unit }\n    schedule { weekday dayOfMonth anchorDate }\n    capacity { current max }\n    active\n    createdAt\n    updatedAt\n  }\n": typeof types.JobCoreFragmentDoc,
    "\n  fragment TransactionCore on Transaction {\n    id\n    accountId\n    toAccountId\n    classId\n    classroomId\n    type\n    amount\n    memo\n    createdByUserId\n    idempotencyKey\n    createdAt\n    updatedAt\n  }\n": typeof types.TransactionCoreFragmentDoc,
    "\n  fragment AccountWithBalance on Account {\n    id\n    studentId\n    classId\n    classroomId\n    balance\n    createdAt\n    updatedAt\n  }\n": typeof types.AccountWithBalanceFragmentDoc,
    "\n  fragment PayRequestCore on PayRequest {\n    id\n    classId\n    studentId\n    amount\n    reason\n    justification\n    status\n    teacherComment\n    createdAt\n    updatedAt\n  }\n": typeof types.PayRequestCoreFragmentDoc,
    "\n  fragment ClassReasonCore on ClassReason {\n    id\n    label\n    classId\n    createdAt\n    updatedAt\n  }\n": typeof types.ClassReasonCoreFragmentDoc,
    "\n  mutation Login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      accessToken\n      user { id name email role }\n    }\n  }\n": typeof types.LoginDocument,
    "\n  mutation SignUp($input: SignUpInput!) {\n    signUp(input: $input) {\n      accessToken\n      user { id name email role }\n    }\n  }\n": typeof types.SignUpDocument,
    "\n  mutation Logout {\n    logout\n  }\n": typeof types.LogoutDocument,
    "\n  mutation RefreshAccessToken {\n    refreshAccessToken\n  }\n": typeof types.RefreshAccessTokenDocument,
    "\n  mutation OAuthLogin($provider: OAuthProvider!, $code: String!) {\n    oauthLogin(provider: $provider, code: $code) {\n      user {\n        id\n        role\n        name\n        email\n        status\n        oauthProvider\n        oauthProviderId\n        profilePicture\n        createdAt\n        updatedAt\n      }\n      accessToken\n    }\n  }\n": typeof types.OAuthLoginDocument,
    "\n  mutation CreateClass($input: CreateClassInput!) {\n    createClass(input: $input) {\n      id\n      name\n      subject\n      period\n      gradeLevel\n      joinCode\n      defaultCurrency\n      students {\n        id\n        name\n        classId\n        balance\n      }\n    }\n  }\n": typeof types.CreateClassDocument,
    "\n  mutation UpdateClass($id: ID!, $input: UpdateClassInput!) {\n    updateClass(id: $id, input: $input) {\n      id\n      name\n      subject\n      period\n      gradeLevel\n      joinCode\n      defaultCurrency\n      isArchived\n      updatedAt\n    }\n  }\n": typeof types.UpdateClassDocument,
    "\n  mutation RotateJoinCode($id: ID!) {\n    rotateJoinCode(id: $id) {\n      id\n      joinCode\n    }\n  }\n": typeof types.RotateJoinCodeDocument,
    "\n  mutation DeleteClass($id: ID!, $hard: Boolean = false) {\n    deleteClass(id: $id, hard: $hard)\n  }\n": typeof types.DeleteClassDocument,
    "\n  mutation IssueFine($input: IssueFineInput!) {\n    issueFine(input: $input) {\n      id\n      studentId\n      student {\n        id\n        name\n      }\n      classId\n      teacherId\n      amount\n      reason\n      description\n      transactionId\n      status\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.IssueFineDocument,
    "\n  mutation WaiveFine($id: ID!, $reason: String!) {\n    waiveFine(id: $id, reason: $reason) {\n      id\n      studentId\n      classId\n      teacherId\n      amount\n      reason\n      description\n      transactionId\n      status\n      waivedReason\n      waivedAt\n      waivedByUserId\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.WaiveFineDocument,
    "\n  mutation DeleteFine($id: ID!) {\n    deleteFine(id: $id)\n  }\n": typeof types.DeleteFineDocument,
    "\n  mutation CreateJob($input: CreateJobInput!) {\n    createJob(input: $input) {\n      id\n      classId\n      title\n      description\n      rolesResponsibilities\n      salary {\n        amount\n        unit\n      }\n      period\n      capacity {\n        current\n        max\n      }\n      active\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.CreateJobDocument,
    "\n  mutation UpdateJob($id: ID!, $input: UpdateJobInput!) {\n    updateJob(id: $id, input: $input) {\n      id\n      classId\n      title\n      description\n      rolesResponsibilities\n      salary {\n        amount\n        unit\n      }\n      period\n      capacity {\n        current\n        max\n      }\n      active\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.UpdateJobDocument,
    "\n  mutation DeleteJob($id: ID!) {\n    deleteJob(id: $id)\n  }\n": typeof types.DeleteJobDocument,
    "\n  mutation ApplyForJob($input: ApplyForJobInput!) {\n    applyForJob(input: $input) {\n      id\n      jobId\n      job {\n        id\n        title\n      }\n      classId\n      studentId\n      status\n      applicationText\n      qualifications\n      availability\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.ApplyForJobDocument,
    "\n  mutation ApproveJobApplication($id: ID!) {\n    approveJobApplication(id: $id) {\n      id\n      jobId\n      classId\n      studentId\n      student {\n        id\n        name\n      }\n      status\n      decidedAt\n      updatedAt\n    }\n  }\n": typeof types.ApproveJobApplicationDocument,
    "\n  mutation RejectJobApplication($id: ID!, $reason: String) {\n    rejectJobApplication(id: $id, reason: $reason) {\n      id\n      jobId\n      classId\n      studentId\n      student {\n        id\n        name\n      }\n      status\n      decidedAt\n      updatedAt\n    }\n  }\n": typeof types.RejectJobApplicationDocument,
    "\n  mutation WithdrawJobApplication($id: ID!) {\n    withdrawJobApplication(id: $id) {\n      id\n      status\n      updatedAt\n    }\n  }\n": typeof types.WithdrawJobApplicationDocument,
    "\n  mutation JoinClass($joinCode: String!) {\n    joinClass(joinCode: $joinCode) {\n      id\n      name\n      subject\n      period\n      gradeLevel\n      defaultCurrency\n      joinCode\n    }\n  }\n": typeof types.JoinClassDocument,
    "\n  mutation CreatePayRequest($input: CreatePayRequestInput!) {\n    createPayRequest(input: $input) {\n      id\n      status\n      amount\n      reason\n      justification\n      createdAt\n    }\n  }\n": typeof types.CreatePayRequestDocument,
    "\n  mutation ApprovePayRequest($id: ID!, $amount: Int!, $comment: String) {\n    approvePayRequest(id: $id, amount: $amount, comment: $comment) {\n      id\n      status\n      amount\n      teacherComment\n    }\n  }\n": typeof types.ApprovePayRequestDocument,
    "\n  mutation SubmitPayRequest($id: ID!) {\n    submitPayRequest(id: $id) {\n      id\n      status\n    }\n  }\n": typeof types.SubmitPayRequestDocument,
    "\n  mutation RebukePayRequest($id: ID!, $comment: String!) {\n    rebukePayRequest(id: $id, comment: $comment) {\n      id\n      status\n      teacherComment\n    }\n  }\n": typeof types.RebukePayRequestDocument,
    "\n  mutation DenyPayRequest($id: ID!, $comment: String!) {\n    denyPayRequest(id: $id, comment: $comment) {\n      id\n      status\n      teacherComment\n    }\n  }\n": typeof types.DenyPayRequestDocument,
    "\n  mutation AddPayRequestComment($payRequestId: ID!, $content: String!) {\n    addPayRequestComment(payRequestId: $payRequestId, content: $content) {\n      id\n      content\n      user {\n        id\n        name\n      }\n      createdAt\n    }\n  }\n": typeof types.AddPayRequestCommentDocument,
    "\n  mutation CreateRedemptionRequest($purchaseId: ID!, $studentNote: String!) {\n    createRedemptionRequest(purchaseId: $purchaseId, studentNote: $studentNote) {\n      id\n      purchaseId\n      studentId\n      classId\n      status\n      studentNote\n      createdAt\n    }\n  }\n": typeof types.CreateRedemptionRequestDocument,
    "\n  mutation ApproveRedemption($id: ID!, $teacherComment: String!) {\n    approveRedemption(id: $id, teacherComment: $teacherComment) {\n      id\n      purchaseId\n      studentId\n      classId\n      status\n      studentNote\n      teacherComment\n      reviewedByUserId\n      reviewedAt\n      createdAt\n    }\n  }\n": typeof types.ApproveRedemptionDocument,
    "\n  mutation DenyRedemption($id: ID!, $teacherComment: String!) {\n    denyRedemption(id: $id, teacherComment: $teacherComment) {\n      id\n      purchaseId\n      studentId\n      classId\n      status\n      studentNote\n      teacherComment\n      reviewedByUserId\n      reviewedAt\n      createdAt\n    }\n  }\n": typeof types.DenyRedemptionDocument,
    "\n  mutation CreateStoreItem($input: CreateStoreItemInput!) {\n    createStoreItem(input: $input) {\n      id\n      title\n      price\n      description\n      imageUrl\n      stock\n      perStudentLimit\n      active\n      sort\n    }\n  }\n": typeof types.CreateStoreItemDocument,
    "\n  mutation UpdateStoreItem($id: ID!, $input: UpdateStoreItemInput!) {\n    updateStoreItem(id: $id, input: $input) {\n      id\n      title\n      price\n      description\n      imageUrl\n      stock\n      perStudentLimit\n      active\n      sort\n    }\n  }\n": typeof types.UpdateStoreItemDocument,
    "\n  mutation DeleteStoreItem($id: ID!) {\n    deleteStoreItem(id: $id)\n  }\n": typeof types.DeleteStoreItemDocument,
    "\n  mutation MakePurchase($input: MakePurchaseInput!) {\n    makePurchase(input: $input) {\n      id\n      quantity\n      unitPrice\n      total\n      createdAt\n    }\n  }\n": typeof types.MakePurchaseDocument,
    "\n  query Account($studentId: ID!, $classId: ID!) {\n    account(studentId: $studentId, classId: $classId) {\n      id\n      studentId\n      classId\n      balance\n    }\n  }\n": typeof types.AccountDocument,
    "\n  query TransactionsByAccount($accountId: ID!) {\n    transactionsByAccount(accountId: $accountId) {\n      id\n      type\n      amount\n      memo\n      createdAt\n    }\n  }\n": typeof types.TransactionsByAccountDocument,
    "\n  query StudentBackpack($studentId: ID!, $classId: ID!) {\n    studentBackpack(studentId: $studentId, classId: $classId) {\n      id\n      itemId\n      studentId\n      classId\n      storeItemId\n      unitPrice\n      total\n      quantity\n      createdAt\n      status\n      redemptionDate\n      redemptionNote\n      hasPendingRedemption\n      storeItem {\n        id\n        title\n        description\n        price\n        imageUrl\n      }\n    }\n  }\n": typeof types.StudentBackpackDocument,
    "\n  query PurchaseHistory($studentId: ID!, $classId: ID!) {\n    purchaseHistory(studentId: $studentId, classId: $classId) {\n      id\n      itemId\n      studentId\n      classId\n      storeItemId\n      unitPrice\n      total\n      quantity\n      createdAt\n      status\n      redemptionDate\n      redemptionNote\n      storeItem {\n        id\n        title\n        description\n        price\n        imageUrl\n      }\n    }\n  }\n": typeof types.PurchaseHistoryDocument,
    "\n  query RedemptionRequests($classId: ID!, $status: RedemptionStatus) {\n    redemptionRequests(classId: $classId, status: $status) {\n      id\n      purchaseId\n      studentId\n      classId\n      status\n      studentNote\n      teacherComment\n      reviewedByUserId\n      reviewedAt\n      createdAt\n      purchase {\n        id\n        itemId\n        unitPrice\n        total\n        quantity\n        createdAt\n        storeItem {\n          id\n          title\n          description\n          imageUrl\n        }\n      }\n      student {\n        id\n        name\n        email\n      }\n      reviewedBy {\n        id\n        name\n        email\n      }\n    }\n  }\n": typeof types.RedemptionRequestsDocument,
    "\n  query RedemptionRequest($id: ID!) {\n    redemptionRequest(id: $id) {\n      id\n      purchaseId\n      studentId\n      classId\n      status\n      studentNote\n      teacherComment\n      reviewedByUserId\n      reviewedAt\n      createdAt\n      purchase {\n        id\n        unitPrice\n        total\n        quantity\n        createdAt\n        storeItem {\n          id\n          title\n          description\n          price\n          imageUrl\n        }\n      }\n      student {\n        id\n        name\n        email\n      }\n      reviewedBy {\n        id\n        name\n        email\n      }\n    }\n  }\n": typeof types.RedemptionRequestDocument,
    "\n  query RedemptionHistory($studentId: ID!, $classId: ID!) {\n    redemptionHistory(studentId: $studentId, classId: $classId) {\n      id\n      purchaseId\n      studentId\n      classId\n      status\n      studentNote\n      teacherComment\n      reviewedByUserId\n      reviewedAt\n      createdAt\n      purchase {\n        id\n        itemId\n        unitPrice\n        total\n        quantity\n        createdAt\n        status\n        redemptionDate\n        storeItem {\n          id\n          title\n          description\n          price\n          imageUrl\n        }\n      }\n      reviewedBy {\n        id\n        name\n      }\n    }\n  }\n": typeof types.RedemptionHistoryDocument,
    "\n  query GetClasses($includeArchived: Boolean = false) {\n    classes(includeArchived: $includeArchived) {\n      id\n      name\n      subject\n      period\n      gradeLevel\n      joinCode\n      defaultCurrency\n      isArchived\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetClassesDocument,
    "\n  query GetClassById($id: ID!) {\n    class(id: $id) {\n      id\n      name\n      subject\n      period\n      gradeLevel\n      joinCode\n      schoolName\n      district\n      payPeriodDefault\n      startingBalance\n      teacherIds\n      defaultCurrency\n      isArchived\n      students {\n        id\n        name\n        classId\n        balance\n      }\n      storeItems {\n        id\n        title\n        price\n        description\n        imageUrl\n        stock\n        perStudentLimit\n        active\n        sort\n      }\n      jobs {\n        id\n        title\n        description\n        period\n        salary {\n          amount\n          unit\n        }\n        capacity {\n          current\n          max\n        }\n        active\n      }\n      transactions {\n        id\n        type\n        amount\n        memo\n        createdAt\n      }\n      payRequests {\n        id\n        amount\n        reason\n        justification\n        status\n        teacherComment\n        createdAt\n      }\n      reasons {\n        id\n        label\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetClassByIdDocument,
    "\n  query GetClassBySlug($slug: String!) {\n    class(slug: $slug) {\n      id\n      name\n      subject\n      period\n      gradeLevel\n      joinCode\n      defaultCurrency\n      isArchived\n    }\n  }\n": typeof types.GetClassBySlugDocument,
    "\n  query ClassesByUser(\n    $userId: ID!\n    $role: Role\n    $includeArchived: Boolean = false\n  ) {\n    classesByUser(\n      userId: $userId\n      role: $role\n      includeArchived: $includeArchived\n    ) {\n      id\n      name\n      subject\n      period\n      defaultCurrency\n      isArchived\n    }\n  }\n": typeof types.ClassesByUserDocument,
    "\n  query FinesByClass($classId: ID!, $status: FineStatus) {\n    finesByClass(classId: $classId, status: $status) {\n      id\n      studentId\n      student {\n        id\n        name\n        email\n      }\n      classId\n      teacherId\n      teacher {\n        id\n        name\n      }\n      amount\n      reason\n      description\n      transactionId\n      status\n      waivedReason\n      waivedAt\n      waivedByUserId\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.FinesByClassDocument,
    "\n  query FinesByStudent($studentId: ID!, $classId: ID!) {\n    finesByStudent(studentId: $studentId, classId: $classId) {\n      id\n      studentId\n      classId\n      teacherId\n      teacher {\n        id\n        name\n      }\n      amount\n      reason\n      description\n      transactionId\n      status\n      waivedReason\n      waivedAt\n      waivedByUserId\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.FinesByStudentDocument,
    "\n  query Fine($id: ID!) {\n    fine(id: $id) {\n      id\n      studentId\n      student {\n        id\n        name\n        email\n      }\n      classId\n      teacherId\n      teacher {\n        id\n        name\n      }\n      amount\n      reason\n      description\n      transactionId\n      transaction {\n        id\n        type\n        amount\n        memo\n        createdAt\n      }\n      status\n      waivedReason\n      waivedAt\n      waivedByUserId\n      waivedBy {\n        id\n        name\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.FineDocument,
    "\n  query Jobs($classId: ID!, $activeOnly: Boolean) {\n    jobs(classId: $classId, activeOnly: $activeOnly) {\n      id\n      classId\n      title\n      description\n      rolesResponsibilities\n      salary {\n        amount\n        unit\n      }\n      period\n      capacity {\n        current\n        max\n      }\n      active\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.JobsDocument,
    "\n  query Job($id: ID!) {\n    job(id: $id) {\n      id\n      classId\n      title\n      description\n      rolesResponsibilities\n      salary {\n        amount\n        unit\n      }\n      period\n      capacity {\n        current\n        max\n      }\n      active\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.JobDocument,
    "\n  query JobApplications(\n    $jobId: ID\n    $studentId: ID\n    $classId: ID\n    $status: JobApplicationStatus\n  ) {\n    jobApplications(\n      jobId: $jobId\n      studentId: $studentId\n      classId: $classId\n      status: $status\n    ) {\n      id\n      jobId\n      job {\n        id\n        title\n        description\n        salary {\n          amount\n          unit\n        }\n        period\n      }\n      classId\n      studentId\n      student {\n        id\n        name\n        email\n      }\n      status\n      applicationText\n      qualifications\n      availability\n      createdAt\n      decidedAt\n      updatedAt\n    }\n  }\n": typeof types.JobApplicationsDocument,
    "\n  query JobApplication($id: ID!) {\n    jobApplication(id: $id) {\n      id\n      jobId\n      job {\n        id\n        title\n        description\n        rolesResponsibilities\n        salary {\n          amount\n          unit\n        }\n        period\n      }\n      classId\n      studentId\n      student {\n        id\n        name\n        email\n      }\n      status\n      applicationText\n      qualifications\n      availability\n      createdAt\n      decidedAt\n      updatedAt\n    }\n  }\n": typeof types.JobApplicationDocument,
    "\n  query StudentEmployments(\n    $studentId: ID!\n    $classId: ID!\n    $status: EmploymentStatus\n  ) {\n    studentEmployments(\n      studentId: $studentId\n      classId: $classId\n      status: $status\n    ) {\n      id\n      jobId\n      classId\n      studentId\n      status\n      startedAt\n      endedAt\n      lastPaidAt\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.StudentEmploymentsDocument,
    "\n  query JobEmployments($jobId: ID!, $status: EmploymentStatus) {\n    jobEmployments(jobId: $jobId, status: $status) {\n      id\n      jobId\n      classId\n      studentId\n      status\n      startedAt\n      endedAt\n      lastPaidAt\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.JobEmploymentsDocument,
    "\n  query Me {\n    me {\n      id\n      name\n      email\n      role\n    }\n  }\n": typeof types.MeDocument,
    "\n  query GetNotifications($userId: ID, $limit: Int, $unreadOnly: Boolean) {\n    notifications(userId: $userId, limit: $limit, unreadOnly: $unreadOnly) {\n      id\n      userId\n      type\n      title\n      message\n      relatedId\n      relatedType\n      isRead\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.GetNotificationsDocument,
    "\n  query GetUnreadNotificationCount {\n    unreadNotificationCount\n  }\n": typeof types.GetUnreadNotificationCountDocument,
    "\n  mutation MarkNotificationAsRead($id: ID!) {\n    markNotificationAsRead(id: $id) {\n      id\n      isRead\n    }\n  }\n": typeof types.MarkNotificationAsReadDocument,
    "\n  mutation MarkAllNotificationsAsRead {\n    markAllNotificationsAsRead\n  }\n": typeof types.MarkAllNotificationsAsReadDocument,
    "\n  mutation ClearAllNotifications {\n    clearAllNotifications\n  }\n": typeof types.ClearAllNotificationsDocument,
    "\n  query ReasonsByClass($classId: ID!) {\n    reasonsByClass(classId: $classId) {\n      id\n      label\n    }\n  }\n": typeof types.ReasonsByClassDocument,
    "\n  mutation AddReasons($classId: ID!, $labels: [String!]!) {\n    addReasons(classId: $classId, labels: $labels) {\n      id\n      label\n    }\n  }\n": typeof types.AddReasonsDocument,
    "\n  mutation SetReasons($classId: ID!, $labels: [String!]!) {\n    setReasons(classId: $classId, labels: $labels) {\n      id\n      label\n    }\n  }\n": typeof types.SetReasonsDocument,
    "\n  query PayRequestsByStudent($classId: ID!, $studentId: ID!) {\n    payRequestsByStudent(classId: $classId, studentId: $studentId) {\n      id\n      amount\n      reason\n      justification\n      status\n      teacherComment\n      createdAt\n      comments {\n        id\n        content\n        user {\n          id\n          name\n        }\n        createdAt\n      }\n    }\n  }\n": typeof types.PayRequestsByStudentDocument,
    "\n  query PayRequestsByClass($classId: ID!, $status: PayRequestStatus) {\n    payRequestsByClass(classId: $classId, status: $status) {\n      id\n      student {\n        id\n        name\n      }\n      amount\n      reason\n      justification\n      status\n      teacherComment\n      createdAt\n      comments {\n        id\n        content\n        user {\n          id\n          name\n        }\n        createdAt\n      }\n    }\n  }\n": typeof types.PayRequestsByClassDocument,
    "\n  query GetClassStatistics($classId: ID!) {\n    classStatistics(classId: $classId) {\n      totalStudents\n      totalJobs\n      activeJobs\n      totalEmployments\n      pendingApplications\n      totalTransactions\n      totalPayRequests\n      pendingPayRequests\n      averageBalance\n      totalCirculation\n    }\n  }\n": typeof types.GetClassStatisticsDocument,
    "\n  query StoreItemsByClass($classId: ID!) {\n    storeItemsByClass(classId: $classId) {\n      id\n      title\n      price\n      description\n      imageUrl\n      stock\n      perStudentLimit\n      active\n      sort\n    }\n  }\n": typeof types.StoreItemsByClassDocument,
    "\n  query StudentDetails($studentId: ID!, $classId: ID!) {\n    account(studentId: $studentId, classId: $classId) {\n      id\n      balance\n      studentId\n      classId\n    }\n    studentBackpack(studentId: $studentId, classId: $classId) {\n      id\n      studentId\n      classId\n      storeItemId\n      unitPrice\n      total\n      quantity\n      createdAt\n      status\n      redemptionDate\n      redemptionNote\n      storeItem {\n        id\n        title\n        description\n        price\n        imageUrl\n      }\n    }\n    purchaseHistory(studentId: $studentId, classId: $classId) {\n      id\n      studentId\n      classId\n      storeItemId\n      unitPrice\n      total\n      quantity\n      createdAt\n      status\n      redemptionDate\n      redemptionNote\n      storeItem {\n        id\n        title\n        description\n        price\n        imageUrl\n      }\n    }\n  }\n": typeof types.StudentDetailsDocument,
    "\n  query StudentTransactions($accountId: ID!) {\n    transactionsByAccount(accountId: $accountId) {\n      id\n      accountId\n      amount\n      type\n      memo\n      createdAt\n    }\n  }\n": typeof types.StudentTransactionsDocument,
    "\n  query StudentsByClass($classId: ID!) {\n    studentsByClass(classId: $classId) {\n      id\n      name\n      classId\n      balance\n    }\n  }\n": typeof types.StudentsByClassDocument,
    "\n  query StudentsDirectory(\n    $filter: StudentsFilter\n    $limit: Int = 50\n    $offset: Int = 0\n  ) {\n    students(filter: $filter, limit: $limit, offset: $offset) {\n      nodes {\n        id\n        name\n        email\n        role\n        status\n        createdAt\n        updatedAt\n      }\n      totalCount\n    }\n  }\n": typeof types.StudentsDirectoryDocument,
    "\n  query StudentsByTeacher {\n    studentsByTeacher {\n      id\n      name\n      balance\n      classId\n      class {\n        id\n        name\n        subject\n        period\n      }\n    }\n  }\n": typeof types.StudentsByTeacherDocument,
    "query MySubscription {\n  mySubscription {\n    id\n    userId\n    planTier\n    status\n    limits {\n      maxClasses\n      maxStudentsPerClass\n      maxStoreItems\n      maxJobs\n      customCurrency\n      analytics\n      exportData\n      prioritySupport\n    }\n    stripeCustomerId\n    stripeSubscriptionId\n    currentPeriodStart\n    currentPeriodEnd\n    trialEndsAt\n    cancelAtPeriodEnd\n    cancelledAt\n    createdAt\n    updatedAt\n  }\n}\n\nquery AvailablePlans {\n  availablePlans {\n    tier\n    name\n    price\n    billingPeriod\n    limits {\n      maxClasses\n      maxStudentsPerClass\n      maxStoreItems\n      maxJobs\n      customCurrency\n      analytics\n      exportData\n      prioritySupport\n    }\n    features\n    stripePriceId\n  }\n}\n\nquery CheckFeatureAccess($feature: String!) {\n  checkFeatureAccess(feature: $feature) {\n    allowed\n    currentUsage\n    limit\n    reason\n  }\n}\n\nquery CanCreateClass {\n  canCreateClass {\n    allowed\n    currentUsage\n    limit\n    reason\n  }\n}\n\nquery CanAddStudent($classId: ID!) {\n  canAddStudent(classId: $classId) {\n    allowed\n    currentUsage\n    limit\n    reason\n  }\n}\n\nmutation CreateCheckoutSession($planTier: PlanTier!) {\n  createCheckoutSession(planTier: $planTier)\n}\n\nmutation CancelSubscription {\n  cancelSubscription {\n    id\n    userId\n    planTier\n    status\n    limits {\n      maxClasses\n      maxStudentsPerClass\n      maxStoreItems\n      maxJobs\n      customCurrency\n      analytics\n      exportData\n      prioritySupport\n    }\n    cancelAtPeriodEnd\n    cancelledAt\n    createdAt\n    updatedAt\n  }\n}\n\nmutation ReactivateSubscription {\n  reactivateSubscription {\n    id\n    userId\n    planTier\n    status\n    limits {\n      maxClasses\n      maxStudentsPerClass\n      maxStoreItems\n      maxJobs\n      customCurrency\n      analytics\n      exportData\n      prioritySupport\n    }\n    cancelAtPeriodEnd\n    cancelledAt\n    createdAt\n    updatedAt\n  }\n}": typeof types.MySubscriptionDocument,
    "\n  subscription NotificationReceived($userId: ID!) {\n    notificationReceived(userId: $userId) {\n      id\n      userId\n      type\n      title\n      message\n      relatedId\n      relatedType\n      isRead\n      createdAt\n      updatedAt\n    }\n  }\n": typeof types.NotificationReceivedDocument,
    "\n  subscription PayRequestCreated($classId: ID!) {\n    payRequestCreated(classId: $classId) {\n      id\n      student {\n        id\n        name\n      }\n      amount\n      reason\n      justification\n      status\n      createdAt\n    }\n  }\n": typeof types.PayRequestCreatedDocument,
    "\n  subscription PayRequestStatusChanged($classId: ID!) {\n    payRequestStatusChanged(classId: $classId) {\n      id\n      status\n      amount\n      teacherComment\n    }\n  }\n": typeof types.PayRequestStatusChangedDocument,
    "\n  subscription PayRequestCommentAdded($payRequestId: ID!) {\n    payRequestCommentAdded(payRequestId: $payRequestId) {\n      id\n      content\n      user {\n        id\n        name\n      }\n      createdAt\n    }\n  }\n": typeof types.PayRequestCommentAddedDocument,
};
const documents: Documents = {
    "\n  fragment UserCore on User {\n    id\n    name\n    email\n    role\n    status\n    createdAt\n    updatedAt\n  }\n": types.UserCoreFragmentDoc,
    "\n  fragment ClassCore on Class {\n    id\n    classroomId\n    slug\n    name\n    subject\n    period\n    gradeLevel\n    joinCode\n    schoolName\n    district\n    payPeriodDefault\n    startingBalance\n    teacherIds\n    defaultCurrency\n    isArchived\n    createdAt\n    updatedAt\n  }\n": types.ClassCoreFragmentDoc,
    "\n  fragment StudentDtoCore on Student {\n    id\n    name\n    balance\n    classId\n  }\n": types.StudentDtoCoreFragmentDoc,
    "\n  fragment StoreItemCore on StoreItem {\n    id\n    classId\n    title\n    price\n    description\n    imageUrl\n    stock\n    perStudentLimit\n    active\n    sort\n    createdAt\n    updatedAt\n  }\n": types.StoreItemCoreFragmentDoc,
    "\n  fragment JobCore on Job {\n    id\n    classId\n    title\n    description\n    period\n    salary { amount unit }\n    schedule { weekday dayOfMonth anchorDate }\n    capacity { current max }\n    active\n    createdAt\n    updatedAt\n  }\n": types.JobCoreFragmentDoc,
    "\n  fragment TransactionCore on Transaction {\n    id\n    accountId\n    toAccountId\n    classId\n    classroomId\n    type\n    amount\n    memo\n    createdByUserId\n    idempotencyKey\n    createdAt\n    updatedAt\n  }\n": types.TransactionCoreFragmentDoc,
    "\n  fragment AccountWithBalance on Account {\n    id\n    studentId\n    classId\n    classroomId\n    balance\n    createdAt\n    updatedAt\n  }\n": types.AccountWithBalanceFragmentDoc,
    "\n  fragment PayRequestCore on PayRequest {\n    id\n    classId\n    studentId\n    amount\n    reason\n    justification\n    status\n    teacherComment\n    createdAt\n    updatedAt\n  }\n": types.PayRequestCoreFragmentDoc,
    "\n  fragment ClassReasonCore on ClassReason {\n    id\n    label\n    classId\n    createdAt\n    updatedAt\n  }\n": types.ClassReasonCoreFragmentDoc,
    "\n  mutation Login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      accessToken\n      user { id name email role }\n    }\n  }\n": types.LoginDocument,
    "\n  mutation SignUp($input: SignUpInput!) {\n    signUp(input: $input) {\n      accessToken\n      user { id name email role }\n    }\n  }\n": types.SignUpDocument,
    "\n  mutation Logout {\n    logout\n  }\n": types.LogoutDocument,
    "\n  mutation RefreshAccessToken {\n    refreshAccessToken\n  }\n": types.RefreshAccessTokenDocument,
    "\n  mutation OAuthLogin($provider: OAuthProvider!, $code: String!) {\n    oauthLogin(provider: $provider, code: $code) {\n      user {\n        id\n        role\n        name\n        email\n        status\n        oauthProvider\n        oauthProviderId\n        profilePicture\n        createdAt\n        updatedAt\n      }\n      accessToken\n    }\n  }\n": types.OAuthLoginDocument,
    "\n  mutation CreateClass($input: CreateClassInput!) {\n    createClass(input: $input) {\n      id\n      name\n      subject\n      period\n      gradeLevel\n      joinCode\n      defaultCurrency\n      students {\n        id\n        name\n        classId\n        balance\n      }\n    }\n  }\n": types.CreateClassDocument,
    "\n  mutation UpdateClass($id: ID!, $input: UpdateClassInput!) {\n    updateClass(id: $id, input: $input) {\n      id\n      name\n      subject\n      period\n      gradeLevel\n      joinCode\n      defaultCurrency\n      isArchived\n      updatedAt\n    }\n  }\n": types.UpdateClassDocument,
    "\n  mutation RotateJoinCode($id: ID!) {\n    rotateJoinCode(id: $id) {\n      id\n      joinCode\n    }\n  }\n": types.RotateJoinCodeDocument,
    "\n  mutation DeleteClass($id: ID!, $hard: Boolean = false) {\n    deleteClass(id: $id, hard: $hard)\n  }\n": types.DeleteClassDocument,
    "\n  mutation IssueFine($input: IssueFineInput!) {\n    issueFine(input: $input) {\n      id\n      studentId\n      student {\n        id\n        name\n      }\n      classId\n      teacherId\n      amount\n      reason\n      description\n      transactionId\n      status\n      createdAt\n      updatedAt\n    }\n  }\n": types.IssueFineDocument,
    "\n  mutation WaiveFine($id: ID!, $reason: String!) {\n    waiveFine(id: $id, reason: $reason) {\n      id\n      studentId\n      classId\n      teacherId\n      amount\n      reason\n      description\n      transactionId\n      status\n      waivedReason\n      waivedAt\n      waivedByUserId\n      createdAt\n      updatedAt\n    }\n  }\n": types.WaiveFineDocument,
    "\n  mutation DeleteFine($id: ID!) {\n    deleteFine(id: $id)\n  }\n": types.DeleteFineDocument,
    "\n  mutation CreateJob($input: CreateJobInput!) {\n    createJob(input: $input) {\n      id\n      classId\n      title\n      description\n      rolesResponsibilities\n      salary {\n        amount\n        unit\n      }\n      period\n      capacity {\n        current\n        max\n      }\n      active\n      createdAt\n      updatedAt\n    }\n  }\n": types.CreateJobDocument,
    "\n  mutation UpdateJob($id: ID!, $input: UpdateJobInput!) {\n    updateJob(id: $id, input: $input) {\n      id\n      classId\n      title\n      description\n      rolesResponsibilities\n      salary {\n        amount\n        unit\n      }\n      period\n      capacity {\n        current\n        max\n      }\n      active\n      createdAt\n      updatedAt\n    }\n  }\n": types.UpdateJobDocument,
    "\n  mutation DeleteJob($id: ID!) {\n    deleteJob(id: $id)\n  }\n": types.DeleteJobDocument,
    "\n  mutation ApplyForJob($input: ApplyForJobInput!) {\n    applyForJob(input: $input) {\n      id\n      jobId\n      job {\n        id\n        title\n      }\n      classId\n      studentId\n      status\n      applicationText\n      qualifications\n      availability\n      createdAt\n      updatedAt\n    }\n  }\n": types.ApplyForJobDocument,
    "\n  mutation ApproveJobApplication($id: ID!) {\n    approveJobApplication(id: $id) {\n      id\n      jobId\n      classId\n      studentId\n      student {\n        id\n        name\n      }\n      status\n      decidedAt\n      updatedAt\n    }\n  }\n": types.ApproveJobApplicationDocument,
    "\n  mutation RejectJobApplication($id: ID!, $reason: String) {\n    rejectJobApplication(id: $id, reason: $reason) {\n      id\n      jobId\n      classId\n      studentId\n      student {\n        id\n        name\n      }\n      status\n      decidedAt\n      updatedAt\n    }\n  }\n": types.RejectJobApplicationDocument,
    "\n  mutation WithdrawJobApplication($id: ID!) {\n    withdrawJobApplication(id: $id) {\n      id\n      status\n      updatedAt\n    }\n  }\n": types.WithdrawJobApplicationDocument,
    "\n  mutation JoinClass($joinCode: String!) {\n    joinClass(joinCode: $joinCode) {\n      id\n      name\n      subject\n      period\n      gradeLevel\n      defaultCurrency\n      joinCode\n    }\n  }\n": types.JoinClassDocument,
    "\n  mutation CreatePayRequest($input: CreatePayRequestInput!) {\n    createPayRequest(input: $input) {\n      id\n      status\n      amount\n      reason\n      justification\n      createdAt\n    }\n  }\n": types.CreatePayRequestDocument,
    "\n  mutation ApprovePayRequest($id: ID!, $amount: Int!, $comment: String) {\n    approvePayRequest(id: $id, amount: $amount, comment: $comment) {\n      id\n      status\n      amount\n      teacherComment\n    }\n  }\n": types.ApprovePayRequestDocument,
    "\n  mutation SubmitPayRequest($id: ID!) {\n    submitPayRequest(id: $id) {\n      id\n      status\n    }\n  }\n": types.SubmitPayRequestDocument,
    "\n  mutation RebukePayRequest($id: ID!, $comment: String!) {\n    rebukePayRequest(id: $id, comment: $comment) {\n      id\n      status\n      teacherComment\n    }\n  }\n": types.RebukePayRequestDocument,
    "\n  mutation DenyPayRequest($id: ID!, $comment: String!) {\n    denyPayRequest(id: $id, comment: $comment) {\n      id\n      status\n      teacherComment\n    }\n  }\n": types.DenyPayRequestDocument,
    "\n  mutation AddPayRequestComment($payRequestId: ID!, $content: String!) {\n    addPayRequestComment(payRequestId: $payRequestId, content: $content) {\n      id\n      content\n      user {\n        id\n        name\n      }\n      createdAt\n    }\n  }\n": types.AddPayRequestCommentDocument,
    "\n  mutation CreateRedemptionRequest($purchaseId: ID!, $studentNote: String!) {\n    createRedemptionRequest(purchaseId: $purchaseId, studentNote: $studentNote) {\n      id\n      purchaseId\n      studentId\n      classId\n      status\n      studentNote\n      createdAt\n    }\n  }\n": types.CreateRedemptionRequestDocument,
    "\n  mutation ApproveRedemption($id: ID!, $teacherComment: String!) {\n    approveRedemption(id: $id, teacherComment: $teacherComment) {\n      id\n      purchaseId\n      studentId\n      classId\n      status\n      studentNote\n      teacherComment\n      reviewedByUserId\n      reviewedAt\n      createdAt\n    }\n  }\n": types.ApproveRedemptionDocument,
    "\n  mutation DenyRedemption($id: ID!, $teacherComment: String!) {\n    denyRedemption(id: $id, teacherComment: $teacherComment) {\n      id\n      purchaseId\n      studentId\n      classId\n      status\n      studentNote\n      teacherComment\n      reviewedByUserId\n      reviewedAt\n      createdAt\n    }\n  }\n": types.DenyRedemptionDocument,
    "\n  mutation CreateStoreItem($input: CreateStoreItemInput!) {\n    createStoreItem(input: $input) {\n      id\n      title\n      price\n      description\n      imageUrl\n      stock\n      perStudentLimit\n      active\n      sort\n    }\n  }\n": types.CreateStoreItemDocument,
    "\n  mutation UpdateStoreItem($id: ID!, $input: UpdateStoreItemInput!) {\n    updateStoreItem(id: $id, input: $input) {\n      id\n      title\n      price\n      description\n      imageUrl\n      stock\n      perStudentLimit\n      active\n      sort\n    }\n  }\n": types.UpdateStoreItemDocument,
    "\n  mutation DeleteStoreItem($id: ID!) {\n    deleteStoreItem(id: $id)\n  }\n": types.DeleteStoreItemDocument,
    "\n  mutation MakePurchase($input: MakePurchaseInput!) {\n    makePurchase(input: $input) {\n      id\n      quantity\n      unitPrice\n      total\n      createdAt\n    }\n  }\n": types.MakePurchaseDocument,
    "\n  query Account($studentId: ID!, $classId: ID!) {\n    account(studentId: $studentId, classId: $classId) {\n      id\n      studentId\n      classId\n      balance\n    }\n  }\n": types.AccountDocument,
    "\n  query TransactionsByAccount($accountId: ID!) {\n    transactionsByAccount(accountId: $accountId) {\n      id\n      type\n      amount\n      memo\n      createdAt\n    }\n  }\n": types.TransactionsByAccountDocument,
    "\n  query StudentBackpack($studentId: ID!, $classId: ID!) {\n    studentBackpack(studentId: $studentId, classId: $classId) {\n      id\n      itemId\n      studentId\n      classId\n      storeItemId\n      unitPrice\n      total\n      quantity\n      createdAt\n      status\n      redemptionDate\n      redemptionNote\n      hasPendingRedemption\n      storeItem {\n        id\n        title\n        description\n        price\n        imageUrl\n      }\n    }\n  }\n": types.StudentBackpackDocument,
    "\n  query PurchaseHistory($studentId: ID!, $classId: ID!) {\n    purchaseHistory(studentId: $studentId, classId: $classId) {\n      id\n      itemId\n      studentId\n      classId\n      storeItemId\n      unitPrice\n      total\n      quantity\n      createdAt\n      status\n      redemptionDate\n      redemptionNote\n      storeItem {\n        id\n        title\n        description\n        price\n        imageUrl\n      }\n    }\n  }\n": types.PurchaseHistoryDocument,
    "\n  query RedemptionRequests($classId: ID!, $status: RedemptionStatus) {\n    redemptionRequests(classId: $classId, status: $status) {\n      id\n      purchaseId\n      studentId\n      classId\n      status\n      studentNote\n      teacherComment\n      reviewedByUserId\n      reviewedAt\n      createdAt\n      purchase {\n        id\n        itemId\n        unitPrice\n        total\n        quantity\n        createdAt\n        storeItem {\n          id\n          title\n          description\n          imageUrl\n        }\n      }\n      student {\n        id\n        name\n        email\n      }\n      reviewedBy {\n        id\n        name\n        email\n      }\n    }\n  }\n": types.RedemptionRequestsDocument,
    "\n  query RedemptionRequest($id: ID!) {\n    redemptionRequest(id: $id) {\n      id\n      purchaseId\n      studentId\n      classId\n      status\n      studentNote\n      teacherComment\n      reviewedByUserId\n      reviewedAt\n      createdAt\n      purchase {\n        id\n        unitPrice\n        total\n        quantity\n        createdAt\n        storeItem {\n          id\n          title\n          description\n          price\n          imageUrl\n        }\n      }\n      student {\n        id\n        name\n        email\n      }\n      reviewedBy {\n        id\n        name\n        email\n      }\n    }\n  }\n": types.RedemptionRequestDocument,
    "\n  query RedemptionHistory($studentId: ID!, $classId: ID!) {\n    redemptionHistory(studentId: $studentId, classId: $classId) {\n      id\n      purchaseId\n      studentId\n      classId\n      status\n      studentNote\n      teacherComment\n      reviewedByUserId\n      reviewedAt\n      createdAt\n      purchase {\n        id\n        itemId\n        unitPrice\n        total\n        quantity\n        createdAt\n        status\n        redemptionDate\n        storeItem {\n          id\n          title\n          description\n          price\n          imageUrl\n        }\n      }\n      reviewedBy {\n        id\n        name\n      }\n    }\n  }\n": types.RedemptionHistoryDocument,
    "\n  query GetClasses($includeArchived: Boolean = false) {\n    classes(includeArchived: $includeArchived) {\n      id\n      name\n      subject\n      period\n      gradeLevel\n      joinCode\n      defaultCurrency\n      isArchived\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetClassesDocument,
    "\n  query GetClassById($id: ID!) {\n    class(id: $id) {\n      id\n      name\n      subject\n      period\n      gradeLevel\n      joinCode\n      schoolName\n      district\n      payPeriodDefault\n      startingBalance\n      teacherIds\n      defaultCurrency\n      isArchived\n      students {\n        id\n        name\n        classId\n        balance\n      }\n      storeItems {\n        id\n        title\n        price\n        description\n        imageUrl\n        stock\n        perStudentLimit\n        active\n        sort\n      }\n      jobs {\n        id\n        title\n        description\n        period\n        salary {\n          amount\n          unit\n        }\n        capacity {\n          current\n          max\n        }\n        active\n      }\n      transactions {\n        id\n        type\n        amount\n        memo\n        createdAt\n      }\n      payRequests {\n        id\n        amount\n        reason\n        justification\n        status\n        teacherComment\n        createdAt\n      }\n      reasons {\n        id\n        label\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetClassByIdDocument,
    "\n  query GetClassBySlug($slug: String!) {\n    class(slug: $slug) {\n      id\n      name\n      subject\n      period\n      gradeLevel\n      joinCode\n      defaultCurrency\n      isArchived\n    }\n  }\n": types.GetClassBySlugDocument,
    "\n  query ClassesByUser(\n    $userId: ID!\n    $role: Role\n    $includeArchived: Boolean = false\n  ) {\n    classesByUser(\n      userId: $userId\n      role: $role\n      includeArchived: $includeArchived\n    ) {\n      id\n      name\n      subject\n      period\n      defaultCurrency\n      isArchived\n    }\n  }\n": types.ClassesByUserDocument,
    "\n  query FinesByClass($classId: ID!, $status: FineStatus) {\n    finesByClass(classId: $classId, status: $status) {\n      id\n      studentId\n      student {\n        id\n        name\n        email\n      }\n      classId\n      teacherId\n      teacher {\n        id\n        name\n      }\n      amount\n      reason\n      description\n      transactionId\n      status\n      waivedReason\n      waivedAt\n      waivedByUserId\n      createdAt\n      updatedAt\n    }\n  }\n": types.FinesByClassDocument,
    "\n  query FinesByStudent($studentId: ID!, $classId: ID!) {\n    finesByStudent(studentId: $studentId, classId: $classId) {\n      id\n      studentId\n      classId\n      teacherId\n      teacher {\n        id\n        name\n      }\n      amount\n      reason\n      description\n      transactionId\n      status\n      waivedReason\n      waivedAt\n      waivedByUserId\n      createdAt\n      updatedAt\n    }\n  }\n": types.FinesByStudentDocument,
    "\n  query Fine($id: ID!) {\n    fine(id: $id) {\n      id\n      studentId\n      student {\n        id\n        name\n        email\n      }\n      classId\n      teacherId\n      teacher {\n        id\n        name\n      }\n      amount\n      reason\n      description\n      transactionId\n      transaction {\n        id\n        type\n        amount\n        memo\n        createdAt\n      }\n      status\n      waivedReason\n      waivedAt\n      waivedByUserId\n      waivedBy {\n        id\n        name\n      }\n      createdAt\n      updatedAt\n    }\n  }\n": types.FineDocument,
    "\n  query Jobs($classId: ID!, $activeOnly: Boolean) {\n    jobs(classId: $classId, activeOnly: $activeOnly) {\n      id\n      classId\n      title\n      description\n      rolesResponsibilities\n      salary {\n        amount\n        unit\n      }\n      period\n      capacity {\n        current\n        max\n      }\n      active\n      createdAt\n      updatedAt\n    }\n  }\n": types.JobsDocument,
    "\n  query Job($id: ID!) {\n    job(id: $id) {\n      id\n      classId\n      title\n      description\n      rolesResponsibilities\n      salary {\n        amount\n        unit\n      }\n      period\n      capacity {\n        current\n        max\n      }\n      active\n      createdAt\n      updatedAt\n    }\n  }\n": types.JobDocument,
    "\n  query JobApplications(\n    $jobId: ID\n    $studentId: ID\n    $classId: ID\n    $status: JobApplicationStatus\n  ) {\n    jobApplications(\n      jobId: $jobId\n      studentId: $studentId\n      classId: $classId\n      status: $status\n    ) {\n      id\n      jobId\n      job {\n        id\n        title\n        description\n        salary {\n          amount\n          unit\n        }\n        period\n      }\n      classId\n      studentId\n      student {\n        id\n        name\n        email\n      }\n      status\n      applicationText\n      qualifications\n      availability\n      createdAt\n      decidedAt\n      updatedAt\n    }\n  }\n": types.JobApplicationsDocument,
    "\n  query JobApplication($id: ID!) {\n    jobApplication(id: $id) {\n      id\n      jobId\n      job {\n        id\n        title\n        description\n        rolesResponsibilities\n        salary {\n          amount\n          unit\n        }\n        period\n      }\n      classId\n      studentId\n      student {\n        id\n        name\n        email\n      }\n      status\n      applicationText\n      qualifications\n      availability\n      createdAt\n      decidedAt\n      updatedAt\n    }\n  }\n": types.JobApplicationDocument,
    "\n  query StudentEmployments(\n    $studentId: ID!\n    $classId: ID!\n    $status: EmploymentStatus\n  ) {\n    studentEmployments(\n      studentId: $studentId\n      classId: $classId\n      status: $status\n    ) {\n      id\n      jobId\n      classId\n      studentId\n      status\n      startedAt\n      endedAt\n      lastPaidAt\n      createdAt\n      updatedAt\n    }\n  }\n": types.StudentEmploymentsDocument,
    "\n  query JobEmployments($jobId: ID!, $status: EmploymentStatus) {\n    jobEmployments(jobId: $jobId, status: $status) {\n      id\n      jobId\n      classId\n      studentId\n      status\n      startedAt\n      endedAt\n      lastPaidAt\n      createdAt\n      updatedAt\n    }\n  }\n": types.JobEmploymentsDocument,
    "\n  query Me {\n    me {\n      id\n      name\n      email\n      role\n    }\n  }\n": types.MeDocument,
    "\n  query GetNotifications($userId: ID, $limit: Int, $unreadOnly: Boolean) {\n    notifications(userId: $userId, limit: $limit, unreadOnly: $unreadOnly) {\n      id\n      userId\n      type\n      title\n      message\n      relatedId\n      relatedType\n      isRead\n      createdAt\n      updatedAt\n    }\n  }\n": types.GetNotificationsDocument,
    "\n  query GetUnreadNotificationCount {\n    unreadNotificationCount\n  }\n": types.GetUnreadNotificationCountDocument,
    "\n  mutation MarkNotificationAsRead($id: ID!) {\n    markNotificationAsRead(id: $id) {\n      id\n      isRead\n    }\n  }\n": types.MarkNotificationAsReadDocument,
    "\n  mutation MarkAllNotificationsAsRead {\n    markAllNotificationsAsRead\n  }\n": types.MarkAllNotificationsAsReadDocument,
    "\n  mutation ClearAllNotifications {\n    clearAllNotifications\n  }\n": types.ClearAllNotificationsDocument,
    "\n  query ReasonsByClass($classId: ID!) {\n    reasonsByClass(classId: $classId) {\n      id\n      label\n    }\n  }\n": types.ReasonsByClassDocument,
    "\n  mutation AddReasons($classId: ID!, $labels: [String!]!) {\n    addReasons(classId: $classId, labels: $labels) {\n      id\n      label\n    }\n  }\n": types.AddReasonsDocument,
    "\n  mutation SetReasons($classId: ID!, $labels: [String!]!) {\n    setReasons(classId: $classId, labels: $labels) {\n      id\n      label\n    }\n  }\n": types.SetReasonsDocument,
    "\n  query PayRequestsByStudent($classId: ID!, $studentId: ID!) {\n    payRequestsByStudent(classId: $classId, studentId: $studentId) {\n      id\n      amount\n      reason\n      justification\n      status\n      teacherComment\n      createdAt\n      comments {\n        id\n        content\n        user {\n          id\n          name\n        }\n        createdAt\n      }\n    }\n  }\n": types.PayRequestsByStudentDocument,
    "\n  query PayRequestsByClass($classId: ID!, $status: PayRequestStatus) {\n    payRequestsByClass(classId: $classId, status: $status) {\n      id\n      student {\n        id\n        name\n      }\n      amount\n      reason\n      justification\n      status\n      teacherComment\n      createdAt\n      comments {\n        id\n        content\n        user {\n          id\n          name\n        }\n        createdAt\n      }\n    }\n  }\n": types.PayRequestsByClassDocument,
    "\n  query GetClassStatistics($classId: ID!) {\n    classStatistics(classId: $classId) {\n      totalStudents\n      totalJobs\n      activeJobs\n      totalEmployments\n      pendingApplications\n      totalTransactions\n      totalPayRequests\n      pendingPayRequests\n      averageBalance\n      totalCirculation\n    }\n  }\n": types.GetClassStatisticsDocument,
    "\n  query StoreItemsByClass($classId: ID!) {\n    storeItemsByClass(classId: $classId) {\n      id\n      title\n      price\n      description\n      imageUrl\n      stock\n      perStudentLimit\n      active\n      sort\n    }\n  }\n": types.StoreItemsByClassDocument,
    "\n  query StudentDetails($studentId: ID!, $classId: ID!) {\n    account(studentId: $studentId, classId: $classId) {\n      id\n      balance\n      studentId\n      classId\n    }\n    studentBackpack(studentId: $studentId, classId: $classId) {\n      id\n      studentId\n      classId\n      storeItemId\n      unitPrice\n      total\n      quantity\n      createdAt\n      status\n      redemptionDate\n      redemptionNote\n      storeItem {\n        id\n        title\n        description\n        price\n        imageUrl\n      }\n    }\n    purchaseHistory(studentId: $studentId, classId: $classId) {\n      id\n      studentId\n      classId\n      storeItemId\n      unitPrice\n      total\n      quantity\n      createdAt\n      status\n      redemptionDate\n      redemptionNote\n      storeItem {\n        id\n        title\n        description\n        price\n        imageUrl\n      }\n    }\n  }\n": types.StudentDetailsDocument,
    "\n  query StudentTransactions($accountId: ID!) {\n    transactionsByAccount(accountId: $accountId) {\n      id\n      accountId\n      amount\n      type\n      memo\n      createdAt\n    }\n  }\n": types.StudentTransactionsDocument,
    "\n  query StudentsByClass($classId: ID!) {\n    studentsByClass(classId: $classId) {\n      id\n      name\n      classId\n      balance\n    }\n  }\n": types.StudentsByClassDocument,
    "\n  query StudentsDirectory(\n    $filter: StudentsFilter\n    $limit: Int = 50\n    $offset: Int = 0\n  ) {\n    students(filter: $filter, limit: $limit, offset: $offset) {\n      nodes {\n        id\n        name\n        email\n        role\n        status\n        createdAt\n        updatedAt\n      }\n      totalCount\n    }\n  }\n": types.StudentsDirectoryDocument,
    "\n  query StudentsByTeacher {\n    studentsByTeacher {\n      id\n      name\n      balance\n      classId\n      class {\n        id\n        name\n        subject\n        period\n      }\n    }\n  }\n": types.StudentsByTeacherDocument,
    "query MySubscription {\n  mySubscription {\n    id\n    userId\n    planTier\n    status\n    limits {\n      maxClasses\n      maxStudentsPerClass\n      maxStoreItems\n      maxJobs\n      customCurrency\n      analytics\n      exportData\n      prioritySupport\n    }\n    stripeCustomerId\n    stripeSubscriptionId\n    currentPeriodStart\n    currentPeriodEnd\n    trialEndsAt\n    cancelAtPeriodEnd\n    cancelledAt\n    createdAt\n    updatedAt\n  }\n}\n\nquery AvailablePlans {\n  availablePlans {\n    tier\n    name\n    price\n    billingPeriod\n    limits {\n      maxClasses\n      maxStudentsPerClass\n      maxStoreItems\n      maxJobs\n      customCurrency\n      analytics\n      exportData\n      prioritySupport\n    }\n    features\n    stripePriceId\n  }\n}\n\nquery CheckFeatureAccess($feature: String!) {\n  checkFeatureAccess(feature: $feature) {\n    allowed\n    currentUsage\n    limit\n    reason\n  }\n}\n\nquery CanCreateClass {\n  canCreateClass {\n    allowed\n    currentUsage\n    limit\n    reason\n  }\n}\n\nquery CanAddStudent($classId: ID!) {\n  canAddStudent(classId: $classId) {\n    allowed\n    currentUsage\n    limit\n    reason\n  }\n}\n\nmutation CreateCheckoutSession($planTier: PlanTier!) {\n  createCheckoutSession(planTier: $planTier)\n}\n\nmutation CancelSubscription {\n  cancelSubscription {\n    id\n    userId\n    planTier\n    status\n    limits {\n      maxClasses\n      maxStudentsPerClass\n      maxStoreItems\n      maxJobs\n      customCurrency\n      analytics\n      exportData\n      prioritySupport\n    }\n    cancelAtPeriodEnd\n    cancelledAt\n    createdAt\n    updatedAt\n  }\n}\n\nmutation ReactivateSubscription {\n  reactivateSubscription {\n    id\n    userId\n    planTier\n    status\n    limits {\n      maxClasses\n      maxStudentsPerClass\n      maxStoreItems\n      maxJobs\n      customCurrency\n      analytics\n      exportData\n      prioritySupport\n    }\n    cancelAtPeriodEnd\n    cancelledAt\n    createdAt\n    updatedAt\n  }\n}": types.MySubscriptionDocument,
    "\n  subscription NotificationReceived($userId: ID!) {\n    notificationReceived(userId: $userId) {\n      id\n      userId\n      type\n      title\n      message\n      relatedId\n      relatedType\n      isRead\n      createdAt\n      updatedAt\n    }\n  }\n": types.NotificationReceivedDocument,
    "\n  subscription PayRequestCreated($classId: ID!) {\n    payRequestCreated(classId: $classId) {\n      id\n      student {\n        id\n        name\n      }\n      amount\n      reason\n      justification\n      status\n      createdAt\n    }\n  }\n": types.PayRequestCreatedDocument,
    "\n  subscription PayRequestStatusChanged($classId: ID!) {\n    payRequestStatusChanged(classId: $classId) {\n      id\n      status\n      amount\n      teacherComment\n    }\n  }\n": types.PayRequestStatusChangedDocument,
    "\n  subscription PayRequestCommentAdded($payRequestId: ID!) {\n    payRequestCommentAdded(payRequestId: $payRequestId) {\n      id\n      content\n      user {\n        id\n        name\n      }\n      createdAt\n    }\n  }\n": types.PayRequestCommentAddedDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment UserCore on User {\n    id\n    name\n    email\n    role\n    status\n    createdAt\n    updatedAt\n  }\n"): (typeof documents)["\n  fragment UserCore on User {\n    id\n    name\n    email\n    role\n    status\n    createdAt\n    updatedAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ClassCore on Class {\n    id\n    classroomId\n    slug\n    name\n    subject\n    period\n    gradeLevel\n    joinCode\n    schoolName\n    district\n    payPeriodDefault\n    startingBalance\n    teacherIds\n    defaultCurrency\n    isArchived\n    createdAt\n    updatedAt\n  }\n"): (typeof documents)["\n  fragment ClassCore on Class {\n    id\n    classroomId\n    slug\n    name\n    subject\n    period\n    gradeLevel\n    joinCode\n    schoolName\n    district\n    payPeriodDefault\n    startingBalance\n    teacherIds\n    defaultCurrency\n    isArchived\n    createdAt\n    updatedAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment StudentDtoCore on Student {\n    id\n    name\n    balance\n    classId\n  }\n"): (typeof documents)["\n  fragment StudentDtoCore on Student {\n    id\n    name\n    balance\n    classId\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment StoreItemCore on StoreItem {\n    id\n    classId\n    title\n    price\n    description\n    imageUrl\n    stock\n    perStudentLimit\n    active\n    sort\n    createdAt\n    updatedAt\n  }\n"): (typeof documents)["\n  fragment StoreItemCore on StoreItem {\n    id\n    classId\n    title\n    price\n    description\n    imageUrl\n    stock\n    perStudentLimit\n    active\n    sort\n    createdAt\n    updatedAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment JobCore on Job {\n    id\n    classId\n    title\n    description\n    period\n    salary { amount unit }\n    schedule { weekday dayOfMonth anchorDate }\n    capacity { current max }\n    active\n    createdAt\n    updatedAt\n  }\n"): (typeof documents)["\n  fragment JobCore on Job {\n    id\n    classId\n    title\n    description\n    period\n    salary { amount unit }\n    schedule { weekday dayOfMonth anchorDate }\n    capacity { current max }\n    active\n    createdAt\n    updatedAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TransactionCore on Transaction {\n    id\n    accountId\n    toAccountId\n    classId\n    classroomId\n    type\n    amount\n    memo\n    createdByUserId\n    idempotencyKey\n    createdAt\n    updatedAt\n  }\n"): (typeof documents)["\n  fragment TransactionCore on Transaction {\n    id\n    accountId\n    toAccountId\n    classId\n    classroomId\n    type\n    amount\n    memo\n    createdByUserId\n    idempotencyKey\n    createdAt\n    updatedAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AccountWithBalance on Account {\n    id\n    studentId\n    classId\n    classroomId\n    balance\n    createdAt\n    updatedAt\n  }\n"): (typeof documents)["\n  fragment AccountWithBalance on Account {\n    id\n    studentId\n    classId\n    classroomId\n    balance\n    createdAt\n    updatedAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PayRequestCore on PayRequest {\n    id\n    classId\n    studentId\n    amount\n    reason\n    justification\n    status\n    teacherComment\n    createdAt\n    updatedAt\n  }\n"): (typeof documents)["\n  fragment PayRequestCore on PayRequest {\n    id\n    classId\n    studentId\n    amount\n    reason\n    justification\n    status\n    teacherComment\n    createdAt\n    updatedAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ClassReasonCore on ClassReason {\n    id\n    label\n    classId\n    createdAt\n    updatedAt\n  }\n"): (typeof documents)["\n  fragment ClassReasonCore on ClassReason {\n    id\n    label\n    classId\n    createdAt\n    updatedAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      accessToken\n      user { id name email role }\n    }\n  }\n"): (typeof documents)["\n  mutation Login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      accessToken\n      user { id name email role }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SignUp($input: SignUpInput!) {\n    signUp(input: $input) {\n      accessToken\n      user { id name email role }\n    }\n  }\n"): (typeof documents)["\n  mutation SignUp($input: SignUpInput!) {\n    signUp(input: $input) {\n      accessToken\n      user { id name email role }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation Logout {\n    logout\n  }\n"): (typeof documents)["\n  mutation Logout {\n    logout\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RefreshAccessToken {\n    refreshAccessToken\n  }\n"): (typeof documents)["\n  mutation RefreshAccessToken {\n    refreshAccessToken\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation OAuthLogin($provider: OAuthProvider!, $code: String!) {\n    oauthLogin(provider: $provider, code: $code) {\n      user {\n        id\n        role\n        name\n        email\n        status\n        oauthProvider\n        oauthProviderId\n        profilePicture\n        createdAt\n        updatedAt\n      }\n      accessToken\n    }\n  }\n"): (typeof documents)["\n  mutation OAuthLogin($provider: OAuthProvider!, $code: String!) {\n    oauthLogin(provider: $provider, code: $code) {\n      user {\n        id\n        role\n        name\n        email\n        status\n        oauthProvider\n        oauthProviderId\n        profilePicture\n        createdAt\n        updatedAt\n      }\n      accessToken\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateClass($input: CreateClassInput!) {\n    createClass(input: $input) {\n      id\n      name\n      subject\n      period\n      gradeLevel\n      joinCode\n      defaultCurrency\n      students {\n        id\n        name\n        classId\n        balance\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateClass($input: CreateClassInput!) {\n    createClass(input: $input) {\n      id\n      name\n      subject\n      period\n      gradeLevel\n      joinCode\n      defaultCurrency\n      students {\n        id\n        name\n        classId\n        balance\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateClass($id: ID!, $input: UpdateClassInput!) {\n    updateClass(id: $id, input: $input) {\n      id\n      name\n      subject\n      period\n      gradeLevel\n      joinCode\n      defaultCurrency\n      isArchived\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateClass($id: ID!, $input: UpdateClassInput!) {\n    updateClass(id: $id, input: $input) {\n      id\n      name\n      subject\n      period\n      gradeLevel\n      joinCode\n      defaultCurrency\n      isArchived\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RotateJoinCode($id: ID!) {\n    rotateJoinCode(id: $id) {\n      id\n      joinCode\n    }\n  }\n"): (typeof documents)["\n  mutation RotateJoinCode($id: ID!) {\n    rotateJoinCode(id: $id) {\n      id\n      joinCode\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteClass($id: ID!, $hard: Boolean = false) {\n    deleteClass(id: $id, hard: $hard)\n  }\n"): (typeof documents)["\n  mutation DeleteClass($id: ID!, $hard: Boolean = false) {\n    deleteClass(id: $id, hard: $hard)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation IssueFine($input: IssueFineInput!) {\n    issueFine(input: $input) {\n      id\n      studentId\n      student {\n        id\n        name\n      }\n      classId\n      teacherId\n      amount\n      reason\n      description\n      transactionId\n      status\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation IssueFine($input: IssueFineInput!) {\n    issueFine(input: $input) {\n      id\n      studentId\n      student {\n        id\n        name\n      }\n      classId\n      teacherId\n      amount\n      reason\n      description\n      transactionId\n      status\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation WaiveFine($id: ID!, $reason: String!) {\n    waiveFine(id: $id, reason: $reason) {\n      id\n      studentId\n      classId\n      teacherId\n      amount\n      reason\n      description\n      transactionId\n      status\n      waivedReason\n      waivedAt\n      waivedByUserId\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation WaiveFine($id: ID!, $reason: String!) {\n    waiveFine(id: $id, reason: $reason) {\n      id\n      studentId\n      classId\n      teacherId\n      amount\n      reason\n      description\n      transactionId\n      status\n      waivedReason\n      waivedAt\n      waivedByUserId\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteFine($id: ID!) {\n    deleteFine(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeleteFine($id: ID!) {\n    deleteFine(id: $id)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateJob($input: CreateJobInput!) {\n    createJob(input: $input) {\n      id\n      classId\n      title\n      description\n      rolesResponsibilities\n      salary {\n        amount\n        unit\n      }\n      period\n      capacity {\n        current\n        max\n      }\n      active\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateJob($input: CreateJobInput!) {\n    createJob(input: $input) {\n      id\n      classId\n      title\n      description\n      rolesResponsibilities\n      salary {\n        amount\n        unit\n      }\n      period\n      capacity {\n        current\n        max\n      }\n      active\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateJob($id: ID!, $input: UpdateJobInput!) {\n    updateJob(id: $id, input: $input) {\n      id\n      classId\n      title\n      description\n      rolesResponsibilities\n      salary {\n        amount\n        unit\n      }\n      period\n      capacity {\n        current\n        max\n      }\n      active\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateJob($id: ID!, $input: UpdateJobInput!) {\n    updateJob(id: $id, input: $input) {\n      id\n      classId\n      title\n      description\n      rolesResponsibilities\n      salary {\n        amount\n        unit\n      }\n      period\n      capacity {\n        current\n        max\n      }\n      active\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteJob($id: ID!) {\n    deleteJob(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeleteJob($id: ID!) {\n    deleteJob(id: $id)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ApplyForJob($input: ApplyForJobInput!) {\n    applyForJob(input: $input) {\n      id\n      jobId\n      job {\n        id\n        title\n      }\n      classId\n      studentId\n      status\n      applicationText\n      qualifications\n      availability\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation ApplyForJob($input: ApplyForJobInput!) {\n    applyForJob(input: $input) {\n      id\n      jobId\n      job {\n        id\n        title\n      }\n      classId\n      studentId\n      status\n      applicationText\n      qualifications\n      availability\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ApproveJobApplication($id: ID!) {\n    approveJobApplication(id: $id) {\n      id\n      jobId\n      classId\n      studentId\n      student {\n        id\n        name\n      }\n      status\n      decidedAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation ApproveJobApplication($id: ID!) {\n    approveJobApplication(id: $id) {\n      id\n      jobId\n      classId\n      studentId\n      student {\n        id\n        name\n      }\n      status\n      decidedAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RejectJobApplication($id: ID!, $reason: String) {\n    rejectJobApplication(id: $id, reason: $reason) {\n      id\n      jobId\n      classId\n      studentId\n      student {\n        id\n        name\n      }\n      status\n      decidedAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation RejectJobApplication($id: ID!, $reason: String) {\n    rejectJobApplication(id: $id, reason: $reason) {\n      id\n      jobId\n      classId\n      studentId\n      student {\n        id\n        name\n      }\n      status\n      decidedAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation WithdrawJobApplication($id: ID!) {\n    withdrawJobApplication(id: $id) {\n      id\n      status\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  mutation WithdrawJobApplication($id: ID!) {\n    withdrawJobApplication(id: $id) {\n      id\n      status\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation JoinClass($joinCode: String!) {\n    joinClass(joinCode: $joinCode) {\n      id\n      name\n      subject\n      period\n      gradeLevel\n      defaultCurrency\n      joinCode\n    }\n  }\n"): (typeof documents)["\n  mutation JoinClass($joinCode: String!) {\n    joinClass(joinCode: $joinCode) {\n      id\n      name\n      subject\n      period\n      gradeLevel\n      defaultCurrency\n      joinCode\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreatePayRequest($input: CreatePayRequestInput!) {\n    createPayRequest(input: $input) {\n      id\n      status\n      amount\n      reason\n      justification\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreatePayRequest($input: CreatePayRequestInput!) {\n    createPayRequest(input: $input) {\n      id\n      status\n      amount\n      reason\n      justification\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ApprovePayRequest($id: ID!, $amount: Int!, $comment: String) {\n    approvePayRequest(id: $id, amount: $amount, comment: $comment) {\n      id\n      status\n      amount\n      teacherComment\n    }\n  }\n"): (typeof documents)["\n  mutation ApprovePayRequest($id: ID!, $amount: Int!, $comment: String) {\n    approvePayRequest(id: $id, amount: $amount, comment: $comment) {\n      id\n      status\n      amount\n      teacherComment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SubmitPayRequest($id: ID!) {\n    submitPayRequest(id: $id) {\n      id\n      status\n    }\n  }\n"): (typeof documents)["\n  mutation SubmitPayRequest($id: ID!) {\n    submitPayRequest(id: $id) {\n      id\n      status\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RebukePayRequest($id: ID!, $comment: String!) {\n    rebukePayRequest(id: $id, comment: $comment) {\n      id\n      status\n      teacherComment\n    }\n  }\n"): (typeof documents)["\n  mutation RebukePayRequest($id: ID!, $comment: String!) {\n    rebukePayRequest(id: $id, comment: $comment) {\n      id\n      status\n      teacherComment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DenyPayRequest($id: ID!, $comment: String!) {\n    denyPayRequest(id: $id, comment: $comment) {\n      id\n      status\n      teacherComment\n    }\n  }\n"): (typeof documents)["\n  mutation DenyPayRequest($id: ID!, $comment: String!) {\n    denyPayRequest(id: $id, comment: $comment) {\n      id\n      status\n      teacherComment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddPayRequestComment($payRequestId: ID!, $content: String!) {\n    addPayRequestComment(payRequestId: $payRequestId, content: $content) {\n      id\n      content\n      user {\n        id\n        name\n      }\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation AddPayRequestComment($payRequestId: ID!, $content: String!) {\n    addPayRequestComment(payRequestId: $payRequestId, content: $content) {\n      id\n      content\n      user {\n        id\n        name\n      }\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateRedemptionRequest($purchaseId: ID!, $studentNote: String!) {\n    createRedemptionRequest(purchaseId: $purchaseId, studentNote: $studentNote) {\n      id\n      purchaseId\n      studentId\n      classId\n      status\n      studentNote\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation CreateRedemptionRequest($purchaseId: ID!, $studentNote: String!) {\n    createRedemptionRequest(purchaseId: $purchaseId, studentNote: $studentNote) {\n      id\n      purchaseId\n      studentId\n      classId\n      status\n      studentNote\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ApproveRedemption($id: ID!, $teacherComment: String!) {\n    approveRedemption(id: $id, teacherComment: $teacherComment) {\n      id\n      purchaseId\n      studentId\n      classId\n      status\n      studentNote\n      teacherComment\n      reviewedByUserId\n      reviewedAt\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation ApproveRedemption($id: ID!, $teacherComment: String!) {\n    approveRedemption(id: $id, teacherComment: $teacherComment) {\n      id\n      purchaseId\n      studentId\n      classId\n      status\n      studentNote\n      teacherComment\n      reviewedByUserId\n      reviewedAt\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DenyRedemption($id: ID!, $teacherComment: String!) {\n    denyRedemption(id: $id, teacherComment: $teacherComment) {\n      id\n      purchaseId\n      studentId\n      classId\n      status\n      studentNote\n      teacherComment\n      reviewedByUserId\n      reviewedAt\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation DenyRedemption($id: ID!, $teacherComment: String!) {\n    denyRedemption(id: $id, teacherComment: $teacherComment) {\n      id\n      purchaseId\n      studentId\n      classId\n      status\n      studentNote\n      teacherComment\n      reviewedByUserId\n      reviewedAt\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateStoreItem($input: CreateStoreItemInput!) {\n    createStoreItem(input: $input) {\n      id\n      title\n      price\n      description\n      imageUrl\n      stock\n      perStudentLimit\n      active\n      sort\n    }\n  }\n"): (typeof documents)["\n  mutation CreateStoreItem($input: CreateStoreItemInput!) {\n    createStoreItem(input: $input) {\n      id\n      title\n      price\n      description\n      imageUrl\n      stock\n      perStudentLimit\n      active\n      sort\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateStoreItem($id: ID!, $input: UpdateStoreItemInput!) {\n    updateStoreItem(id: $id, input: $input) {\n      id\n      title\n      price\n      description\n      imageUrl\n      stock\n      perStudentLimit\n      active\n      sort\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateStoreItem($id: ID!, $input: UpdateStoreItemInput!) {\n    updateStoreItem(id: $id, input: $input) {\n      id\n      title\n      price\n      description\n      imageUrl\n      stock\n      perStudentLimit\n      active\n      sort\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteStoreItem($id: ID!) {\n    deleteStoreItem(id: $id)\n  }\n"): (typeof documents)["\n  mutation DeleteStoreItem($id: ID!) {\n    deleteStoreItem(id: $id)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MakePurchase($input: MakePurchaseInput!) {\n    makePurchase(input: $input) {\n      id\n      quantity\n      unitPrice\n      total\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  mutation MakePurchase($input: MakePurchaseInput!) {\n    makePurchase(input: $input) {\n      id\n      quantity\n      unitPrice\n      total\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Account($studentId: ID!, $classId: ID!) {\n    account(studentId: $studentId, classId: $classId) {\n      id\n      studentId\n      classId\n      balance\n    }\n  }\n"): (typeof documents)["\n  query Account($studentId: ID!, $classId: ID!) {\n    account(studentId: $studentId, classId: $classId) {\n      id\n      studentId\n      classId\n      balance\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TransactionsByAccount($accountId: ID!) {\n    transactionsByAccount(accountId: $accountId) {\n      id\n      type\n      amount\n      memo\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  query TransactionsByAccount($accountId: ID!) {\n    transactionsByAccount(accountId: $accountId) {\n      id\n      type\n      amount\n      memo\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query StudentBackpack($studentId: ID!, $classId: ID!) {\n    studentBackpack(studentId: $studentId, classId: $classId) {\n      id\n      itemId\n      studentId\n      classId\n      storeItemId\n      unitPrice\n      total\n      quantity\n      createdAt\n      status\n      redemptionDate\n      redemptionNote\n      hasPendingRedemption\n      storeItem {\n        id\n        title\n        description\n        price\n        imageUrl\n      }\n    }\n  }\n"): (typeof documents)["\n  query StudentBackpack($studentId: ID!, $classId: ID!) {\n    studentBackpack(studentId: $studentId, classId: $classId) {\n      id\n      itemId\n      studentId\n      classId\n      storeItemId\n      unitPrice\n      total\n      quantity\n      createdAt\n      status\n      redemptionDate\n      redemptionNote\n      hasPendingRedemption\n      storeItem {\n        id\n        title\n        description\n        price\n        imageUrl\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PurchaseHistory($studentId: ID!, $classId: ID!) {\n    purchaseHistory(studentId: $studentId, classId: $classId) {\n      id\n      itemId\n      studentId\n      classId\n      storeItemId\n      unitPrice\n      total\n      quantity\n      createdAt\n      status\n      redemptionDate\n      redemptionNote\n      storeItem {\n        id\n        title\n        description\n        price\n        imageUrl\n      }\n    }\n  }\n"): (typeof documents)["\n  query PurchaseHistory($studentId: ID!, $classId: ID!) {\n    purchaseHistory(studentId: $studentId, classId: $classId) {\n      id\n      itemId\n      studentId\n      classId\n      storeItemId\n      unitPrice\n      total\n      quantity\n      createdAt\n      status\n      redemptionDate\n      redemptionNote\n      storeItem {\n        id\n        title\n        description\n        price\n        imageUrl\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RedemptionRequests($classId: ID!, $status: RedemptionStatus) {\n    redemptionRequests(classId: $classId, status: $status) {\n      id\n      purchaseId\n      studentId\n      classId\n      status\n      studentNote\n      teacherComment\n      reviewedByUserId\n      reviewedAt\n      createdAt\n      purchase {\n        id\n        itemId\n        unitPrice\n        total\n        quantity\n        createdAt\n        storeItem {\n          id\n          title\n          description\n          imageUrl\n        }\n      }\n      student {\n        id\n        name\n        email\n      }\n      reviewedBy {\n        id\n        name\n        email\n      }\n    }\n  }\n"): (typeof documents)["\n  query RedemptionRequests($classId: ID!, $status: RedemptionStatus) {\n    redemptionRequests(classId: $classId, status: $status) {\n      id\n      purchaseId\n      studentId\n      classId\n      status\n      studentNote\n      teacherComment\n      reviewedByUserId\n      reviewedAt\n      createdAt\n      purchase {\n        id\n        itemId\n        unitPrice\n        total\n        quantity\n        createdAt\n        storeItem {\n          id\n          title\n          description\n          imageUrl\n        }\n      }\n      student {\n        id\n        name\n        email\n      }\n      reviewedBy {\n        id\n        name\n        email\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RedemptionRequest($id: ID!) {\n    redemptionRequest(id: $id) {\n      id\n      purchaseId\n      studentId\n      classId\n      status\n      studentNote\n      teacherComment\n      reviewedByUserId\n      reviewedAt\n      createdAt\n      purchase {\n        id\n        unitPrice\n        total\n        quantity\n        createdAt\n        storeItem {\n          id\n          title\n          description\n          price\n          imageUrl\n        }\n      }\n      student {\n        id\n        name\n        email\n      }\n      reviewedBy {\n        id\n        name\n        email\n      }\n    }\n  }\n"): (typeof documents)["\n  query RedemptionRequest($id: ID!) {\n    redemptionRequest(id: $id) {\n      id\n      purchaseId\n      studentId\n      classId\n      status\n      studentNote\n      teacherComment\n      reviewedByUserId\n      reviewedAt\n      createdAt\n      purchase {\n        id\n        unitPrice\n        total\n        quantity\n        createdAt\n        storeItem {\n          id\n          title\n          description\n          price\n          imageUrl\n        }\n      }\n      student {\n        id\n        name\n        email\n      }\n      reviewedBy {\n        id\n        name\n        email\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RedemptionHistory($studentId: ID!, $classId: ID!) {\n    redemptionHistory(studentId: $studentId, classId: $classId) {\n      id\n      purchaseId\n      studentId\n      classId\n      status\n      studentNote\n      teacherComment\n      reviewedByUserId\n      reviewedAt\n      createdAt\n      purchase {\n        id\n        itemId\n        unitPrice\n        total\n        quantity\n        createdAt\n        status\n        redemptionDate\n        storeItem {\n          id\n          title\n          description\n          price\n          imageUrl\n        }\n      }\n      reviewedBy {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  query RedemptionHistory($studentId: ID!, $classId: ID!) {\n    redemptionHistory(studentId: $studentId, classId: $classId) {\n      id\n      purchaseId\n      studentId\n      classId\n      status\n      studentNote\n      teacherComment\n      reviewedByUserId\n      reviewedAt\n      createdAt\n      purchase {\n        id\n        itemId\n        unitPrice\n        total\n        quantity\n        createdAt\n        status\n        redemptionDate\n        storeItem {\n          id\n          title\n          description\n          price\n          imageUrl\n        }\n      }\n      reviewedBy {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetClasses($includeArchived: Boolean = false) {\n    classes(includeArchived: $includeArchived) {\n      id\n      name\n      subject\n      period\n      gradeLevel\n      joinCode\n      defaultCurrency\n      isArchived\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetClasses($includeArchived: Boolean = false) {\n    classes(includeArchived: $includeArchived) {\n      id\n      name\n      subject\n      period\n      gradeLevel\n      joinCode\n      defaultCurrency\n      isArchived\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetClassById($id: ID!) {\n    class(id: $id) {\n      id\n      name\n      subject\n      period\n      gradeLevel\n      joinCode\n      schoolName\n      district\n      payPeriodDefault\n      startingBalance\n      teacherIds\n      defaultCurrency\n      isArchived\n      students {\n        id\n        name\n        classId\n        balance\n      }\n      storeItems {\n        id\n        title\n        price\n        description\n        imageUrl\n        stock\n        perStudentLimit\n        active\n        sort\n      }\n      jobs {\n        id\n        title\n        description\n        period\n        salary {\n          amount\n          unit\n        }\n        capacity {\n          current\n          max\n        }\n        active\n      }\n      transactions {\n        id\n        type\n        amount\n        memo\n        createdAt\n      }\n      payRequests {\n        id\n        amount\n        reason\n        justification\n        status\n        teacherComment\n        createdAt\n      }\n      reasons {\n        id\n        label\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetClassById($id: ID!) {\n    class(id: $id) {\n      id\n      name\n      subject\n      period\n      gradeLevel\n      joinCode\n      schoolName\n      district\n      payPeriodDefault\n      startingBalance\n      teacherIds\n      defaultCurrency\n      isArchived\n      students {\n        id\n        name\n        classId\n        balance\n      }\n      storeItems {\n        id\n        title\n        price\n        description\n        imageUrl\n        stock\n        perStudentLimit\n        active\n        sort\n      }\n      jobs {\n        id\n        title\n        description\n        period\n        salary {\n          amount\n          unit\n        }\n        capacity {\n          current\n          max\n        }\n        active\n      }\n      transactions {\n        id\n        type\n        amount\n        memo\n        createdAt\n      }\n      payRequests {\n        id\n        amount\n        reason\n        justification\n        status\n        teacherComment\n        createdAt\n      }\n      reasons {\n        id\n        label\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetClassBySlug($slug: String!) {\n    class(slug: $slug) {\n      id\n      name\n      subject\n      period\n      gradeLevel\n      joinCode\n      defaultCurrency\n      isArchived\n    }\n  }\n"): (typeof documents)["\n  query GetClassBySlug($slug: String!) {\n    class(slug: $slug) {\n      id\n      name\n      subject\n      period\n      gradeLevel\n      joinCode\n      defaultCurrency\n      isArchived\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ClassesByUser(\n    $userId: ID!\n    $role: Role\n    $includeArchived: Boolean = false\n  ) {\n    classesByUser(\n      userId: $userId\n      role: $role\n      includeArchived: $includeArchived\n    ) {\n      id\n      name\n      subject\n      period\n      defaultCurrency\n      isArchived\n    }\n  }\n"): (typeof documents)["\n  query ClassesByUser(\n    $userId: ID!\n    $role: Role\n    $includeArchived: Boolean = false\n  ) {\n    classesByUser(\n      userId: $userId\n      role: $role\n      includeArchived: $includeArchived\n    ) {\n      id\n      name\n      subject\n      period\n      defaultCurrency\n      isArchived\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FinesByClass($classId: ID!, $status: FineStatus) {\n    finesByClass(classId: $classId, status: $status) {\n      id\n      studentId\n      student {\n        id\n        name\n        email\n      }\n      classId\n      teacherId\n      teacher {\n        id\n        name\n      }\n      amount\n      reason\n      description\n      transactionId\n      status\n      waivedReason\n      waivedAt\n      waivedByUserId\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query FinesByClass($classId: ID!, $status: FineStatus) {\n    finesByClass(classId: $classId, status: $status) {\n      id\n      studentId\n      student {\n        id\n        name\n        email\n      }\n      classId\n      teacherId\n      teacher {\n        id\n        name\n      }\n      amount\n      reason\n      description\n      transactionId\n      status\n      waivedReason\n      waivedAt\n      waivedByUserId\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FinesByStudent($studentId: ID!, $classId: ID!) {\n    finesByStudent(studentId: $studentId, classId: $classId) {\n      id\n      studentId\n      classId\n      teacherId\n      teacher {\n        id\n        name\n      }\n      amount\n      reason\n      description\n      transactionId\n      status\n      waivedReason\n      waivedAt\n      waivedByUserId\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query FinesByStudent($studentId: ID!, $classId: ID!) {\n    finesByStudent(studentId: $studentId, classId: $classId) {\n      id\n      studentId\n      classId\n      teacherId\n      teacher {\n        id\n        name\n      }\n      amount\n      reason\n      description\n      transactionId\n      status\n      waivedReason\n      waivedAt\n      waivedByUserId\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Fine($id: ID!) {\n    fine(id: $id) {\n      id\n      studentId\n      student {\n        id\n        name\n        email\n      }\n      classId\n      teacherId\n      teacher {\n        id\n        name\n      }\n      amount\n      reason\n      description\n      transactionId\n      transaction {\n        id\n        type\n        amount\n        memo\n        createdAt\n      }\n      status\n      waivedReason\n      waivedAt\n      waivedByUserId\n      waivedBy {\n        id\n        name\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query Fine($id: ID!) {\n    fine(id: $id) {\n      id\n      studentId\n      student {\n        id\n        name\n        email\n      }\n      classId\n      teacherId\n      teacher {\n        id\n        name\n      }\n      amount\n      reason\n      description\n      transactionId\n      transaction {\n        id\n        type\n        amount\n        memo\n        createdAt\n      }\n      status\n      waivedReason\n      waivedAt\n      waivedByUserId\n      waivedBy {\n        id\n        name\n      }\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Jobs($classId: ID!, $activeOnly: Boolean) {\n    jobs(classId: $classId, activeOnly: $activeOnly) {\n      id\n      classId\n      title\n      description\n      rolesResponsibilities\n      salary {\n        amount\n        unit\n      }\n      period\n      capacity {\n        current\n        max\n      }\n      active\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query Jobs($classId: ID!, $activeOnly: Boolean) {\n    jobs(classId: $classId, activeOnly: $activeOnly) {\n      id\n      classId\n      title\n      description\n      rolesResponsibilities\n      salary {\n        amount\n        unit\n      }\n      period\n      capacity {\n        current\n        max\n      }\n      active\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Job($id: ID!) {\n    job(id: $id) {\n      id\n      classId\n      title\n      description\n      rolesResponsibilities\n      salary {\n        amount\n        unit\n      }\n      period\n      capacity {\n        current\n        max\n      }\n      active\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query Job($id: ID!) {\n    job(id: $id) {\n      id\n      classId\n      title\n      description\n      rolesResponsibilities\n      salary {\n        amount\n        unit\n      }\n      period\n      capacity {\n        current\n        max\n      }\n      active\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query JobApplications(\n    $jobId: ID\n    $studentId: ID\n    $classId: ID\n    $status: JobApplicationStatus\n  ) {\n    jobApplications(\n      jobId: $jobId\n      studentId: $studentId\n      classId: $classId\n      status: $status\n    ) {\n      id\n      jobId\n      job {\n        id\n        title\n        description\n        salary {\n          amount\n          unit\n        }\n        period\n      }\n      classId\n      studentId\n      student {\n        id\n        name\n        email\n      }\n      status\n      applicationText\n      qualifications\n      availability\n      createdAt\n      decidedAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query JobApplications(\n    $jobId: ID\n    $studentId: ID\n    $classId: ID\n    $status: JobApplicationStatus\n  ) {\n    jobApplications(\n      jobId: $jobId\n      studentId: $studentId\n      classId: $classId\n      status: $status\n    ) {\n      id\n      jobId\n      job {\n        id\n        title\n        description\n        salary {\n          amount\n          unit\n        }\n        period\n      }\n      classId\n      studentId\n      student {\n        id\n        name\n        email\n      }\n      status\n      applicationText\n      qualifications\n      availability\n      createdAt\n      decidedAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query JobApplication($id: ID!) {\n    jobApplication(id: $id) {\n      id\n      jobId\n      job {\n        id\n        title\n        description\n        rolesResponsibilities\n        salary {\n          amount\n          unit\n        }\n        period\n      }\n      classId\n      studentId\n      student {\n        id\n        name\n        email\n      }\n      status\n      applicationText\n      qualifications\n      availability\n      createdAt\n      decidedAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query JobApplication($id: ID!) {\n    jobApplication(id: $id) {\n      id\n      jobId\n      job {\n        id\n        title\n        description\n        rolesResponsibilities\n        salary {\n          amount\n          unit\n        }\n        period\n      }\n      classId\n      studentId\n      student {\n        id\n        name\n        email\n      }\n      status\n      applicationText\n      qualifications\n      availability\n      createdAt\n      decidedAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query StudentEmployments(\n    $studentId: ID!\n    $classId: ID!\n    $status: EmploymentStatus\n  ) {\n    studentEmployments(\n      studentId: $studentId\n      classId: $classId\n      status: $status\n    ) {\n      id\n      jobId\n      classId\n      studentId\n      status\n      startedAt\n      endedAt\n      lastPaidAt\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query StudentEmployments(\n    $studentId: ID!\n    $classId: ID!\n    $status: EmploymentStatus\n  ) {\n    studentEmployments(\n      studentId: $studentId\n      classId: $classId\n      status: $status\n    ) {\n      id\n      jobId\n      classId\n      studentId\n      status\n      startedAt\n      endedAt\n      lastPaidAt\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query JobEmployments($jobId: ID!, $status: EmploymentStatus) {\n    jobEmployments(jobId: $jobId, status: $status) {\n      id\n      jobId\n      classId\n      studentId\n      status\n      startedAt\n      endedAt\n      lastPaidAt\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query JobEmployments($jobId: ID!, $status: EmploymentStatus) {\n    jobEmployments(jobId: $jobId, status: $status) {\n      id\n      jobId\n      classId\n      studentId\n      status\n      startedAt\n      endedAt\n      lastPaidAt\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Me {\n    me {\n      id\n      name\n      email\n      role\n    }\n  }\n"): (typeof documents)["\n  query Me {\n    me {\n      id\n      name\n      email\n      role\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetNotifications($userId: ID, $limit: Int, $unreadOnly: Boolean) {\n    notifications(userId: $userId, limit: $limit, unreadOnly: $unreadOnly) {\n      id\n      userId\n      type\n      title\n      message\n      relatedId\n      relatedType\n      isRead\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  query GetNotifications($userId: ID, $limit: Int, $unreadOnly: Boolean) {\n    notifications(userId: $userId, limit: $limit, unreadOnly: $unreadOnly) {\n      id\n      userId\n      type\n      title\n      message\n      relatedId\n      relatedType\n      isRead\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUnreadNotificationCount {\n    unreadNotificationCount\n  }\n"): (typeof documents)["\n  query GetUnreadNotificationCount {\n    unreadNotificationCount\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MarkNotificationAsRead($id: ID!) {\n    markNotificationAsRead(id: $id) {\n      id\n      isRead\n    }\n  }\n"): (typeof documents)["\n  mutation MarkNotificationAsRead($id: ID!) {\n    markNotificationAsRead(id: $id) {\n      id\n      isRead\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MarkAllNotificationsAsRead {\n    markAllNotificationsAsRead\n  }\n"): (typeof documents)["\n  mutation MarkAllNotificationsAsRead {\n    markAllNotificationsAsRead\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ClearAllNotifications {\n    clearAllNotifications\n  }\n"): (typeof documents)["\n  mutation ClearAllNotifications {\n    clearAllNotifications\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ReasonsByClass($classId: ID!) {\n    reasonsByClass(classId: $classId) {\n      id\n      label\n    }\n  }\n"): (typeof documents)["\n  query ReasonsByClass($classId: ID!) {\n    reasonsByClass(classId: $classId) {\n      id\n      label\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddReasons($classId: ID!, $labels: [String!]!) {\n    addReasons(classId: $classId, labels: $labels) {\n      id\n      label\n    }\n  }\n"): (typeof documents)["\n  mutation AddReasons($classId: ID!, $labels: [String!]!) {\n    addReasons(classId: $classId, labels: $labels) {\n      id\n      label\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetReasons($classId: ID!, $labels: [String!]!) {\n    setReasons(classId: $classId, labels: $labels) {\n      id\n      label\n    }\n  }\n"): (typeof documents)["\n  mutation SetReasons($classId: ID!, $labels: [String!]!) {\n    setReasons(classId: $classId, labels: $labels) {\n      id\n      label\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PayRequestsByStudent($classId: ID!, $studentId: ID!) {\n    payRequestsByStudent(classId: $classId, studentId: $studentId) {\n      id\n      amount\n      reason\n      justification\n      status\n      teacherComment\n      createdAt\n      comments {\n        id\n        content\n        user {\n          id\n          name\n        }\n        createdAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query PayRequestsByStudent($classId: ID!, $studentId: ID!) {\n    payRequestsByStudent(classId: $classId, studentId: $studentId) {\n      id\n      amount\n      reason\n      justification\n      status\n      teacherComment\n      createdAt\n      comments {\n        id\n        content\n        user {\n          id\n          name\n        }\n        createdAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PayRequestsByClass($classId: ID!, $status: PayRequestStatus) {\n    payRequestsByClass(classId: $classId, status: $status) {\n      id\n      student {\n        id\n        name\n      }\n      amount\n      reason\n      justification\n      status\n      teacherComment\n      createdAt\n      comments {\n        id\n        content\n        user {\n          id\n          name\n        }\n        createdAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query PayRequestsByClass($classId: ID!, $status: PayRequestStatus) {\n    payRequestsByClass(classId: $classId, status: $status) {\n      id\n      student {\n        id\n        name\n      }\n      amount\n      reason\n      justification\n      status\n      teacherComment\n      createdAt\n      comments {\n        id\n        content\n        user {\n          id\n          name\n        }\n        createdAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetClassStatistics($classId: ID!) {\n    classStatistics(classId: $classId) {\n      totalStudents\n      totalJobs\n      activeJobs\n      totalEmployments\n      pendingApplications\n      totalTransactions\n      totalPayRequests\n      pendingPayRequests\n      averageBalance\n      totalCirculation\n    }\n  }\n"): (typeof documents)["\n  query GetClassStatistics($classId: ID!) {\n    classStatistics(classId: $classId) {\n      totalStudents\n      totalJobs\n      activeJobs\n      totalEmployments\n      pendingApplications\n      totalTransactions\n      totalPayRequests\n      pendingPayRequests\n      averageBalance\n      totalCirculation\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query StoreItemsByClass($classId: ID!) {\n    storeItemsByClass(classId: $classId) {\n      id\n      title\n      price\n      description\n      imageUrl\n      stock\n      perStudentLimit\n      active\n      sort\n    }\n  }\n"): (typeof documents)["\n  query StoreItemsByClass($classId: ID!) {\n    storeItemsByClass(classId: $classId) {\n      id\n      title\n      price\n      description\n      imageUrl\n      stock\n      perStudentLimit\n      active\n      sort\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query StudentDetails($studentId: ID!, $classId: ID!) {\n    account(studentId: $studentId, classId: $classId) {\n      id\n      balance\n      studentId\n      classId\n    }\n    studentBackpack(studentId: $studentId, classId: $classId) {\n      id\n      studentId\n      classId\n      storeItemId\n      unitPrice\n      total\n      quantity\n      createdAt\n      status\n      redemptionDate\n      redemptionNote\n      storeItem {\n        id\n        title\n        description\n        price\n        imageUrl\n      }\n    }\n    purchaseHistory(studentId: $studentId, classId: $classId) {\n      id\n      studentId\n      classId\n      storeItemId\n      unitPrice\n      total\n      quantity\n      createdAt\n      status\n      redemptionDate\n      redemptionNote\n      storeItem {\n        id\n        title\n        description\n        price\n        imageUrl\n      }\n    }\n  }\n"): (typeof documents)["\n  query StudentDetails($studentId: ID!, $classId: ID!) {\n    account(studentId: $studentId, classId: $classId) {\n      id\n      balance\n      studentId\n      classId\n    }\n    studentBackpack(studentId: $studentId, classId: $classId) {\n      id\n      studentId\n      classId\n      storeItemId\n      unitPrice\n      total\n      quantity\n      createdAt\n      status\n      redemptionDate\n      redemptionNote\n      storeItem {\n        id\n        title\n        description\n        price\n        imageUrl\n      }\n    }\n    purchaseHistory(studentId: $studentId, classId: $classId) {\n      id\n      studentId\n      classId\n      storeItemId\n      unitPrice\n      total\n      quantity\n      createdAt\n      status\n      redemptionDate\n      redemptionNote\n      storeItem {\n        id\n        title\n        description\n        price\n        imageUrl\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query StudentTransactions($accountId: ID!) {\n    transactionsByAccount(accountId: $accountId) {\n      id\n      accountId\n      amount\n      type\n      memo\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  query StudentTransactions($accountId: ID!) {\n    transactionsByAccount(accountId: $accountId) {\n      id\n      accountId\n      amount\n      type\n      memo\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query StudentsByClass($classId: ID!) {\n    studentsByClass(classId: $classId) {\n      id\n      name\n      classId\n      balance\n    }\n  }\n"): (typeof documents)["\n  query StudentsByClass($classId: ID!) {\n    studentsByClass(classId: $classId) {\n      id\n      name\n      classId\n      balance\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query StudentsDirectory(\n    $filter: StudentsFilter\n    $limit: Int = 50\n    $offset: Int = 0\n  ) {\n    students(filter: $filter, limit: $limit, offset: $offset) {\n      nodes {\n        id\n        name\n        email\n        role\n        status\n        createdAt\n        updatedAt\n      }\n      totalCount\n    }\n  }\n"): (typeof documents)["\n  query StudentsDirectory(\n    $filter: StudentsFilter\n    $limit: Int = 50\n    $offset: Int = 0\n  ) {\n    students(filter: $filter, limit: $limit, offset: $offset) {\n      nodes {\n        id\n        name\n        email\n        role\n        status\n        createdAt\n        updatedAt\n      }\n      totalCount\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query StudentsByTeacher {\n    studentsByTeacher {\n      id\n      name\n      balance\n      classId\n      class {\n        id\n        name\n        subject\n        period\n      }\n    }\n  }\n"): (typeof documents)["\n  query StudentsByTeacher {\n    studentsByTeacher {\n      id\n      name\n      balance\n      classId\n      class {\n        id\n        name\n        subject\n        period\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query MySubscription {\n  mySubscription {\n    id\n    userId\n    planTier\n    status\n    limits {\n      maxClasses\n      maxStudentsPerClass\n      maxStoreItems\n      maxJobs\n      customCurrency\n      analytics\n      exportData\n      prioritySupport\n    }\n    stripeCustomerId\n    stripeSubscriptionId\n    currentPeriodStart\n    currentPeriodEnd\n    trialEndsAt\n    cancelAtPeriodEnd\n    cancelledAt\n    createdAt\n    updatedAt\n  }\n}\n\nquery AvailablePlans {\n  availablePlans {\n    tier\n    name\n    price\n    billingPeriod\n    limits {\n      maxClasses\n      maxStudentsPerClass\n      maxStoreItems\n      maxJobs\n      customCurrency\n      analytics\n      exportData\n      prioritySupport\n    }\n    features\n    stripePriceId\n  }\n}\n\nquery CheckFeatureAccess($feature: String!) {\n  checkFeatureAccess(feature: $feature) {\n    allowed\n    currentUsage\n    limit\n    reason\n  }\n}\n\nquery CanCreateClass {\n  canCreateClass {\n    allowed\n    currentUsage\n    limit\n    reason\n  }\n}\n\nquery CanAddStudent($classId: ID!) {\n  canAddStudent(classId: $classId) {\n    allowed\n    currentUsage\n    limit\n    reason\n  }\n}\n\nmutation CreateCheckoutSession($planTier: PlanTier!) {\n  createCheckoutSession(planTier: $planTier)\n}\n\nmutation CancelSubscription {\n  cancelSubscription {\n    id\n    userId\n    planTier\n    status\n    limits {\n      maxClasses\n      maxStudentsPerClass\n      maxStoreItems\n      maxJobs\n      customCurrency\n      analytics\n      exportData\n      prioritySupport\n    }\n    cancelAtPeriodEnd\n    cancelledAt\n    createdAt\n    updatedAt\n  }\n}\n\nmutation ReactivateSubscription {\n  reactivateSubscription {\n    id\n    userId\n    planTier\n    status\n    limits {\n      maxClasses\n      maxStudentsPerClass\n      maxStoreItems\n      maxJobs\n      customCurrency\n      analytics\n      exportData\n      prioritySupport\n    }\n    cancelAtPeriodEnd\n    cancelledAt\n    createdAt\n    updatedAt\n  }\n}"): (typeof documents)["query MySubscription {\n  mySubscription {\n    id\n    userId\n    planTier\n    status\n    limits {\n      maxClasses\n      maxStudentsPerClass\n      maxStoreItems\n      maxJobs\n      customCurrency\n      analytics\n      exportData\n      prioritySupport\n    }\n    stripeCustomerId\n    stripeSubscriptionId\n    currentPeriodStart\n    currentPeriodEnd\n    trialEndsAt\n    cancelAtPeriodEnd\n    cancelledAt\n    createdAt\n    updatedAt\n  }\n}\n\nquery AvailablePlans {\n  availablePlans {\n    tier\n    name\n    price\n    billingPeriod\n    limits {\n      maxClasses\n      maxStudentsPerClass\n      maxStoreItems\n      maxJobs\n      customCurrency\n      analytics\n      exportData\n      prioritySupport\n    }\n    features\n    stripePriceId\n  }\n}\n\nquery CheckFeatureAccess($feature: String!) {\n  checkFeatureAccess(feature: $feature) {\n    allowed\n    currentUsage\n    limit\n    reason\n  }\n}\n\nquery CanCreateClass {\n  canCreateClass {\n    allowed\n    currentUsage\n    limit\n    reason\n  }\n}\n\nquery CanAddStudent($classId: ID!) {\n  canAddStudent(classId: $classId) {\n    allowed\n    currentUsage\n    limit\n    reason\n  }\n}\n\nmutation CreateCheckoutSession($planTier: PlanTier!) {\n  createCheckoutSession(planTier: $planTier)\n}\n\nmutation CancelSubscription {\n  cancelSubscription {\n    id\n    userId\n    planTier\n    status\n    limits {\n      maxClasses\n      maxStudentsPerClass\n      maxStoreItems\n      maxJobs\n      customCurrency\n      analytics\n      exportData\n      prioritySupport\n    }\n    cancelAtPeriodEnd\n    cancelledAt\n    createdAt\n    updatedAt\n  }\n}\n\nmutation ReactivateSubscription {\n  reactivateSubscription {\n    id\n    userId\n    planTier\n    status\n    limits {\n      maxClasses\n      maxStudentsPerClass\n      maxStoreItems\n      maxJobs\n      customCurrency\n      analytics\n      exportData\n      prioritySupport\n    }\n    cancelAtPeriodEnd\n    cancelledAt\n    createdAt\n    updatedAt\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription NotificationReceived($userId: ID!) {\n    notificationReceived(userId: $userId) {\n      id\n      userId\n      type\n      title\n      message\n      relatedId\n      relatedType\n      isRead\n      createdAt\n      updatedAt\n    }\n  }\n"): (typeof documents)["\n  subscription NotificationReceived($userId: ID!) {\n    notificationReceived(userId: $userId) {\n      id\n      userId\n      type\n      title\n      message\n      relatedId\n      relatedType\n      isRead\n      createdAt\n      updatedAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription PayRequestCreated($classId: ID!) {\n    payRequestCreated(classId: $classId) {\n      id\n      student {\n        id\n        name\n      }\n      amount\n      reason\n      justification\n      status\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  subscription PayRequestCreated($classId: ID!) {\n    payRequestCreated(classId: $classId) {\n      id\n      student {\n        id\n        name\n      }\n      amount\n      reason\n      justification\n      status\n      createdAt\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription PayRequestStatusChanged($classId: ID!) {\n    payRequestStatusChanged(classId: $classId) {\n      id\n      status\n      amount\n      teacherComment\n    }\n  }\n"): (typeof documents)["\n  subscription PayRequestStatusChanged($classId: ID!) {\n    payRequestStatusChanged(classId: $classId) {\n      id\n      status\n      amount\n      teacherComment\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription PayRequestCommentAdded($payRequestId: ID!) {\n    payRequestCommentAdded(payRequestId: $payRequestId) {\n      id\n      content\n      user {\n        id\n        name\n      }\n      createdAt\n    }\n  }\n"): (typeof documents)["\n  subscription PayRequestCommentAdded($payRequestId: ID!) {\n    payRequestCommentAdded(payRequestId: $payRequestId) {\n      id\n      content\n      user {\n        id\n        name\n      }\n      createdAt\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;